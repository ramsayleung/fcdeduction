[[https://github.com/ramsayleung/fcdeduction/workflows/CI/badge.svg]] [[https://img.shields.io/badge/License-MIT-blue.svg]]


* fcdeduction                                                         :TOC_4:
  - [[#背景][背景]]
    - [[#应用命名][应用命名]]
    - [[#业务背景][业务背景]]
    - [[#名词解释][名词解释]]
    - [[#功能拆分][功能拆分]]
    - [[#待确认问题][待确认问题]]
  - [[#系统分析][系统分析]]
    - [[#总体设计][总体设计]]
      - [[#上下游系统依赖关系图][上下游系统依赖关系图:]]
      - [[#用例图][用例图:]]
      - [[#模型][模型:]]
      - [[#物理模型][物理模型]]
      - [[#关键技术][关键技术]]
      - [[#技术栈][技术栈]]
    - [[#功能设计][功能设计]]
      - [[#单设备登录][单设备登录]]
      - [[#登录鉴权][登录鉴权]]
      - [[#开通扣费服务][开通扣费服务]]
      - [[#关闭扣费服务][关闭扣费服务]]
      - [[#查询扣费服务列表][查询扣费服务列表]]
    - [[#详细设计][详细设计]]
      - [[#产品信息][产品信息]]
      - [[#合约信息][合约信息]]
  - [[#测试分析][测试分析]]
    - [[#测试用例][测试用例]]
    - [[#联调用例][联调用例]]
    - [[#资损点测试与回归][资损点测试与回归]]
    - [[#测试记录][测试记录]]
      - [[#登录][登录]]
      - [[#开通扣费服务-1][开通扣费服务]]
      - [[#关闭扣费服务-1][关闭扣费服务]]
      - [[#查询扣费服务列表-1][查询扣费服务列表]]
  - [[#发布计划][发布计划]]
    - [[#发布时间][发布时间]]
    - [[#发布内容][发布内容]]
    - [[#业务发布依赖][业务发布依赖]]
    - [[#配置变更项][配置变更项]]
      - [[#dml变更][DML变更]]
      - [[#ddl变更][DDL变更]]
    - [[#资损风险评估][资损风险评估]]
    - [[#稳定性风险评估][稳定性风险评估]]
    - [[#预发布生产验证case][预发布&生产验证case]]
    - [[#兼容性方案][兼容性方案]]
      - [[#兼容性方案推演][兼容性方案推演]]
    - [[#可监控][可监控]]
    - [[#可灰度][可灰度]]
    - [[#可回滚][可回滚]]
  - [[#三方库依赖][三方库依赖]]
  - [[#成果][成果]]
    - [[#技术要求][技术要求]]
    - [[#如何编译][如何编译]]
    - [[#如何使用][如何使用]]
    - [[#交付物][交付物]]
      - [[#源代码-设计文档-说明文档][源代码, 设计文档, 说明文档]]
      - [[#已部署好的服务端][已部署好的服务端]]
      - [[#可运行的客户端][可运行的客户端]]
  - [[#参考资料][参考资料]]

** 背景
*** 应用命名
    应用命名为 =fcdeduction=, 按照惯例, =fc= 指代对应的租户(=fc= 为 financial cloud, 意为金融云), =deduction= 指扣费系统.
*** 业务背景
    目前支付业务在对外输出的场景中, 为了提高业务体验, 会为客户提供对应扣费服务, 如摩拜的免密支付, 公共交通的免密支付服务等, 原来的扣费服务耦合在支付业务中, 业务能力边界不清晰, 因此现在将扣费服务从原来支付业务中剥离, 新增扣费服务平台, 负责管理相关的扣费服务.
*** 名词解释
    | 涉及名词   | 英文简称 | 详细说明                                                                                                                                                     |
    | 单设备登录 |          | 同一用户在同一时刻只能在一个设备上保持登录态                                                                                                                 |
    | 产品码     |          | 每个服务都是对应的产品, 每个产品都有对应的产品码                                                                                                             |
    | 扣费合约   |          | 每个产品和每个用户都是独立存在的, 通过合约将用户与对应的产品服务建立关联, 扣费合约指代的是建立该关联的目的是作扣费之用, 类似的合约还有收单合约, 绑卡合约等等 |
*** 功能拆分
    后端服务:
    
    | 功能点           | 对应开发 | 开发时间 | 自测时间 |
    | 单设备登录       | Ramsay   |       2D |       1D |
    | 登录鉴权         | Ramsay   |       2D |       1D |
    | 开通扣费服务     | Ramsay   |       2D |       1D |
    | 关闭扣费服务     | Ramsay   |       2D |       1D |
    | 查看扣费服务列表 | Ramsay   |       2D |       1D |

    前端页面:
    | 对应页面         | 对应开发 | 开发时间 | 自测时间 |
    | 登录页面         | Ramsay   |       1D |       1D |
    | 开通扣费服务     | Ramsay   |       1D |       1D |
    | 关闭扣费服务     | Ramsay   |       1D |       1D |
    | 查看扣费服务列表 | Ramsay   |       1D |       1D |
*** 待确认问题
    1. 查询扣费服务列表是否需要分页.
    2. 这次的迭代是否会涉及资金流.
    3. 扣费时实际的费用是如果扣除? 还是说本次只是消息流展示?
** 系统分析
*** 总体设计
    将对应的扣费服务设计为相应的产品, 有对应的产品属性, 定义一个新的扣费服务即在产品中心申请一个新的产品; 用户定义在用户中心, 每个用户可以关联多个不重复的扣费服务; 用户与产品之间通过合约进行关联, 不同的合约定义不同的业务能力与属性; 如在本次需求中, 新增一个扣费合约, 然后用户通过扣费合约关联对应的产品, 形成对应的扣费服务. 

    这样设计的好处是将产品与绑定关系解耦出来; 新增一个业务玩法, 理想情况下只是新增相应的配置; 如当前需求下, 合约中心, 产品中心, 用户中心都是已存在的底层业务域, 新增扣费服务, 只是新增对应的产品, 合约码, 以及对应的合约属性.(但实际合约中心, 产品中心并不存在, 因此本次需要使用对应的单表来模拟对应中台的能力.), 比如接下来要新增个免费服务, 功能与扣费服务类似, 只是不扣费, 那只需要在合约中心增加新的合约及产品中心增加对应的产品码.
    
    此外, 目前的合约绑定关系只有新增(开通扣费服务), 与删除(关闭扣费服务), 实际还可以有类似暂停扣费服务(更新关系状态设置为暂停), 失效扣费服务(还可以重新生效, 更新关系状态设置为失效)
    
    最后, 单设备登录的需求不应该和扣费中心同时出现, 因为扣费与登录是两个不同业务域负责的模块, 不是同一纬度的功能, 他们的需求也应该区分好的; 不过既然产品经理给了这样的需求, argue不下, 也只能按期完成了.

    用户登录使用识别表进行鉴别, 将登录方式与登录值抽象成识别key, 与识别value; 识别key可以是邮箱, 可以是人脸识别key, 安保问题; 识别value可以是登录密码, 人脸识别value, 安保问题答案等; 也就是识别用户的方式不仅限于账密, 也可以支持扩展其他方式, 用户也可以有多种登录识别方式, 而不是简单将账密放入到用户表.

**** 上下游系统依赖关系图:

     [[file:images/%E4%B8%8A%E4%B8%8B%E9%81%8A%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg]]
**** 用例图:

     [[file:images/%E7%94%A8%E4%BE%8B%E5%9B%BE.jpg]]

     + 蓝色: 本期实现
     + 灰色: 本期待定
     + 绿色: 已有功能, 不涉及修改(本期为新增应用, 不涉及原有功能)
     + 黄色: 已有功能, 涉及修改(本期为新增应用, 不涉及原有功能)
**** 模型:
     (其中的合约中心, 用户中心, 产品中心都在本次系分中以单表代替, 实际上中台提供的能力会复杂很多)
    
     [[file:images/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B.jpg]]
**** 物理模型
     de_prod(产品表, prod指product)
     主键: tnt_inst_id + pd_code
     | 字段名       | 是否为空 | 类型          | 说明         |
     | tnt_inst_id  | N        | varchar(8)    | 租户Id       |
     | pd_code      | N        | varchar(32)   | 产品码       |
     | pd_name      | N        | varchar(255)  | 产品名称     |
     | pd_desc      | N        | varchar(2048) | 产品描述     |
     | pd_org_name  | N        | varchar(2048) | 产品所属主体 |
     | gmt_create   | N        | datetime(12)  | 创建时间     |
     | gmt_modified | N        | datetime(12)  | 修改时间     |
     | memo         | Y        | varchar(255)  | 备注         |
     
     de_ar(合约表, ar指arrangement)
     主键: tnt_inst_id + ar_number
     | 字段名       | 是否为空 | 类型          | 说明                                                                                 |
     | tnt_inst_id  | N        | varchar(8)    | 租户Id                                                                               |
     | ar_number    | N        | varchar(32)   | 合约号                                                                               |
     | ar_name      | N        | varchar(255)  | 合约名称                                                                             |
     | ar_version   | N        | varchar(32)   | 合约版本                                                                             |
     | properties   | Y        | varchar(2048) | 合约属性, 用来可以为该合约自定义属性, 例如扣费合约有对应的扣费方式以及开通账户等属性 |
     | gmt_create   | N        | datetime(12)  | 创建时间                                                                             |
     | gmt_modified | N        | datetime(12)  | 修改时间                                                                             |
     | memo         | Y        | varchar(255)  | 备注                                                                                 |
     
     de_user(用户表)
     主键: tnt_inst_id + user_id
     | 字段名       | 是否为空 | 类型         | 说明     |
     | tnt_inst_id  | N        | varchar(8)   | 租户Id   |
     | user_id      | N        | varchar(32)  | 用户Id   |
     | user_name    | N        | varchar(255) | 用户名称 |
     | user_type    | N        | varchar(32)  | 用户类型 |
     | gmt_create   | N        | datetime(12) | 创建时间 |
     | gmt_modified | N        | datetime(12) | 修改时间 |

     de_user_ar_rel(用户合约关系表):
     主键: tnt_inst_id + rel, 唯一键: user_id + pd_code + ar_no. 在关联表加入 =pd_name= 和 =ar_name= 冗余信息是为了减少联表查询, 即展示列表可只展示产品名, 查询具体产品信息时才关联查询产品表.
     | 字段名          | 是否为空 | 类型          | 说明                                   |
     | tnt_inst_id     | N        | varchar(8)    | 租户Id                                 |
     | rel_id          | N        | varchar(32)   | 关系Id                                 |
     | user_id         | N        | varchar(32)   | 用户Id                                 |
     | rel_status      | N        | varchar(8)    | 关系状态, 如生效:1, 暂停:2, 冻结:3等等 |
     | pd_code         | N        | varchar(32)   | 产品码                                 |
     | pd_name         | N        | varchar(255)  | 产品名                                 |
     | pd_org_name     | N        | varchar(255)  | 产品所属主体                           |
     | ar_name         | N        | varchar(255)  | 合约名                                 |
     | ar_no           | N        | varchar(32)   | 合约码                                 |
     | property_values | Y        | varchar(2048) | 对应合约属性及其值                     |
     | gmt_create      | N        | datetime(12)  | 创建时间                               |
     | gmt_modified    | N        | datetime(12)  | 修改时间                               |
     | memo            | Y        | varchar(255)  | 备注                                   |

     de_ident(identification, 通行证关系) 主键：tnt_inst_id, ident_id, 索引 tnt_inst_id, user_id.

     | 字段名       | 是否为空 | 类型          | 说明                           |
     | tnt_inst_id  | N        | varchar(10)   | 租户ID                         |
     | ident_id     | N        | varchar(32)   | 识别ID                         |
     | user_id      | N        | varchar(32)   | 用户ID                         |
     | ident_key    | N        | varchar(20)   | 识别key(如账户, 安保问题)      |
     | ident_type   | N        | varchar(20)   | 识别类型(密码, 安保问题, 人脸) |
     | ident_value  | N        | varchar(4096) | 密码密文                       |
     | gmt_create   | N        | datetime(6)   | 创建日期                       |
     | gmt_modified | N        | datetime(6)   | 修改日期                       |

**** 关键技术
***** 保持登录
      针对我们无线设备而言，很多APP我们的感知就是只有首次登陆需要密码, 以后就可以自动登录, 这就是一种保持登录的技术, 因为用户的感知是直接就进入到了登录态, 所以叫做保持登录, 其实并不是保持了一个一直不失效的登录态. 实现原理是在用户第一次登陆的时候, =将refresh_token=, =expire_time= 和 =sessionId= 一起返回客户端, =refresh_token= 可以理解成是第二次请求服务端刷新 =sessionId= 的凭证，然后客户端在 =sessionId= 快要过期的时候，通过 =refresh_token= 重新获取新的 =sessionId= 和 =refresh_token=, 并且循环这个过程，这样就可以在用户无感知的情况下保持用户登录.
***** 数据安全
      1. 服务端关键信息的日志信息打印需要进行脱敏处理
      2. 客户端/PC端调用后端服务时, 理应使用https协议保证数据安全与通信安全, 由对应的网关进行转换, 将http请求转换为对应的RPC服务调用, 调用返回结果也要做相反的转换, 将rpc结果转换成http响应
***** 幂等设计
      1. 在开通扣费服务时, 要确保同一个用户不会重复开通同一个扣费服务, 又因为服务与用户是通过合约关联起来的, 所以就是要确保, 扣费合约+产品码+用户Id唯一, 目前此幂等规则是通过数据库唯一键约束.
      2. 关闭扣费服务的时候, 要确保多次关闭的效果与单次关闭效果一致, 即N=NP.
      3. 查询扣费列表不涉及幂等规则, 因为查询天然幂等.
**** 技术栈
     + 开发语言: C++
     + RPC框架: grpc
     + 序列化框架: protobuf
     + 持续集成服务: Github Action, 为什么选择Github Action而不是Travis, 可见之前讨论 [[https://github.com/ramsayleung/rspotify/pull/73][Use github actions instead of travis]]
     + 数据库: Mysql
*** 功能设计
**** 单设备登录
     用户通过账密正常登录; 如果存在多端同时登录, 只允许最近一次登录态存在(本次demo中, 主要流程是扣费, 不存在注册的流程, 因此客户都是通过db插入进行初始化的.)
***** 接口功能
      用户通过外标和登录凭证进行登录, 并且同一时刻, 只允许一个终端保持登录态.
***** 流程图
      正常登录流程:

      [[file:images/%E6%AD%A3%E5%B8%B8%E7%99%BB%E5%BD%95.jpg]]
      
      单设备登录:
      
      [[file:images/%E5%8D%95%E8%AE%BE%E5%A4%87%E7%99%BB%E5%BD%95.jpg]]
      
      其中的单设备登录可通过两个key-value键值对实现; 第一个map, 在登录成功之后生成一个唯一token(如UUID), 然后存储token与用户的映射, key为token, value为序列化后的用户信息. 第二个map存储userId与token的映射, 当有第二个设备使用同一个账户登录时, 即存在userId与原有token的映射, 将其更新为userId与新token的映射, 原token没有关联上任何的用户, 那么就将原来登录的设备踢除. 为了可持久化, 这两个map可以使用相应的缓存中间件实现, 如 =redis=.
***** 接口定义
      接口签名(proto 定义):
      #+BEGIN_SRC java
	syntax = "proto3";
	package user;
	enum StatusEnum{
	    SUCCESS = 0;
	    FAILED = 1;
	    UNKKNOWN = 2;
	}

	service User {
	    // 用户登录
	    rpc Login(UserLoginRequest) returns (UserLoginResponse) {}
	}
	message UserLoginRequest {
	    // 用户登录外标, 如电话号码, 邮箱地址等, 目前只支持邮箱
	    string loginKey = 1;
	    // 登录凭证, 如密码, 指纹, 人脸标识等, 目前只支付密码.
	    string loginValue = 2;
	}

	message UserLoginResponse {
	    // 处理状态, 成功, 失败, 处理中
	    string status = 1;
	    // 对应的状态码
	    string code = 2;
	    // 对应的消息或者描述
	    string desc = 3;
	    // 登录态token
	    string token = 4;
	    // 二次刷新token凭证, 保留字段
	    string refreshToken = 5;
	    // 登录态过期时间, 用来配合refreshToken作应用保活, 保留字段.
	    string expireTime = 6;
	}

      #+END_SRC
      入参:

      | 参数名     | 参数类型 | 参数含义     | 必选 | 备注           |
      | loginKey   | String   | 用户登录外标 | Y    | 目前只支持邮箱 |
      | loginValue | String   | 登录凭证     | Y    | 目前只支付密码 |

      返回结果:

      | 参数名       | 参数类型 | 参数含义          | 必选 | 备注                                     |
      | status       | String   | 处理状态          | Y    |                                          |
      | code         | String   | 状态码            | Y    |                                          |
      | message      | String   | 返回结果描述      | N    |                                          |
      | token        | String   | 登录态token       | Y    |                                          |
      | refreshToekn | String   | 二次刷新token凭证 | N    | 保留字段                                 |
      | expireTime   | String   | 登录态过期时间    | N    | 用来配合refreshToken作应用保活, 保留字段 |
      |              |          |                   |      |                                          |
      错误码:
      | 状态    | 状态码 | 描述             |
      | SUCCESS |     00 |                  |
      | FAILED  |     01 | 用户不存在       |
      | FAILED  |     02 | 用户账号密码错误 |
      | FAILED  |     03 | 用户未登录       |
**** 登录鉴权
     通过tokenId鉴定用户是否登录, 通常作为业务请求的前置校验.
***** 接口功能
      登录态校验
***** 接口定义
      接口签名(proto 定义):
      #+BEGIN_SRC java
	syntax = "proto3";
	package user;
	enum StatusEnum{
	    SUCCESS = 0;
	    FAILED = 1;
	    UNKKNOWN = 2;
	}

	service User {
	    // 登录态校验
	    rpc validateLoginSeesion(LoginSessionValidateRequest) returns (LoginSessionValidateResponse) {}
	}
	message LoginSessionValidateRequest {
	    // 登录凭证
	    string token = 1;
	}

	message LoginSessionValidateResponse {
	    // 处理状态, 成功, 失败, 处理中
	    string status = 1;
	    // 对应的状态码
	    string code = 2;
	    // 对应的消息或者描述
	    string desc = 3;
	}

      #+END_SRC
      入参:

      | 参数名 | 参数类型 | 参数含义  | 必选 | 备注 |
      | token  | String   | 登录token | Y    |      |

      返回结果:

      | 参数名       | 参数类型 | 参数含义          | 必选 | 备注                                     |
      | status       | String   | 处理状态          | Y    |                                          |
      | code         | String   | 状态码            | Y    |                                          |
      | message      | String   | 返回结果描述      | N    |                                          |
      |              |          |                   |      |                                          |
      错误码:
      | 状态    | 状态码 | 描述       |
      | SUCCESS |     00 |            |
      | FAILED  |     03 | 用户未登录 |
**** 开通扣费服务
     开通扣费服务与关闭扣费服务的接口设计考虑到将来的扩展, 如果出现新的类似扣费的服务类型, 如补贴服务(有点太美好的感觉), 只需要新增对应的产品码及合约类型, 即全复用开通服务与关闭服务接口
***** 接口功能
      为指定用户开通指定扣费服务
***** 流程图
      [[file:images/%E5%BC%80%E9%80%9A%E6%89%A3%E8%B4%B9%E6%9C%8D%E5%8A%A1.jpg]]
***** 接口定义
      接口签名(proto 定义):
      #+BEGIN_SRC java

	syntax = "proto3";
	package deduction;
	enum StatusEnum{
	    SUCCESS = 0;
	    FAILED = 1;
	    UNKKNOWN = 2;
	}

	service Company {
	    // 开通扣费服务
	    rpc CreateDeductionService(DeduceRequest) returns (DeduceResponse) {}
	}
	message DeduceRequest {
	    // 用户登录态token
	    string token = 1;
	    // 合约号
	    string arNo = 2;
	    // 产品码
	    string pdCode = 3;
	    // 用户Id
	    string userId = 4;
	}

	message DeduceResponse {
	    // 处理状态, 成功, 失败, 处理中
	    string status = 1;
	    // 对应的状态码
	    string code = 2;
	    // 对应的消息或者描述
	    string desc = 3;
	}
      #+END_SRC
      入参:

      | 参数名 | 参数类型 | 参数含义    | 必选 | 备注             |
      | toekn  | String   | 登录态toekn | Y    |                  |
      | arNo   | String   | 合约号      | Y    | 如扣费: 00000001 |
      | pdCode | String   | 产品码      | Y    |                  |
      | userId | String   | 用户Id      | Y    |                  |

      返回结果:

      | 参数名  | 参数类型 | 参数含义     | 必选 | 备注 |
      | status  | String   | 处理状态     | Y    |      |
      | code    | String   | 状态码       | Y    |      |
      | message | String   | 返回结果描述 | N    |      |
      
      错误码:
      | 状态    | 状态码 | 描述             |
      | SUCCESS |     00 |                  |
      | FAILED  |     03 | 用户未登录       |
      | FAILED  |     14 | 产品不存在       |
      | FAILED  |     15 | 合约不存在       |
      | FAILED  |     16 | 重复开通扣费服务 |

**** 关闭扣费服务
***** 接口功能
      为指定用户关闭指定的扣费服务
***** 流程图
      [[file:images/%E5%85%B3%E9%97%AD%E6%89%A3%E8%B4%B9%E6%9C%8D%E5%8A%A1.jpg]]
***** 接口定义
      接口签名(proto 定义):
      #+BEGIN_SRC java
	syntax = "proto3";
	package deduction;
	enum StatusEnum{
	    SUCCESS = 0;
	    FAILED = 1;
	    UNKKNOWN = 2;
	}

	service Company {
	    // 关闭扣费信息
	    rpc CloseDeductionService(DeduceRequest) returns (DeduceResponse) {}
	}
	message DeduceRequest {
	    // 用户登录态token
	    string token = 1;
	    // 合约号
	    string arNo = 2;
	    // 产品码
	    string pdCode = 3;
	    // 用户Id
	    string userId = 4;
	}

	message DeduceResponse {
	    // 处理状态, 成功, 失败, 处理中
	    string status = 1;
	    // 对应的状态码
	    string code = 2;
	    // 对应的消息或者描述
	    string desc = 3;
	}

      #+END_SRC
      入参:

      | 参数名 | 参数类型 | 参数含义    | 必选 | 备注             |
      | toekn  | String   | 登录态toekn | Y    |                  |
      | arNo   | String   | 合约号      | Y    | 如扣费: 00000001 |
      | pdCode | String   | 产品码      | Y    |                  |
      | userId | String   | 用户Id      | Y    |                  |

      返回结果:

      | 参数名  | 参数类型 | 参数含义     | 必选 | 备注 |
      | status  | String   | 处理状态     | Y    |      |
      | code    | String   | 状态码       | Y    |      |
      | message | String   | 返回结果描述 | N    |      |
      
      错误码:
      | 状态    | 状态码 | 描述                   |
      | SUCCESS |     00 |                        |
      | FAILED  |     03 | 用户未登录             |
      | FAILED  |     14 | 产品不存在             |
      | FAILED  |     15 | 合约不存在             |
      | FAILED  |     17 | 用户未开通指定扣费服务 |

**** 查询扣费服务列表
***** 接口功能
      查询指定用户已开通的所有扣费服务(是否需要分页)
***** UI图
      [[file:images/UI_%E6%9F%A5%E8%AF%A2%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8.jpg]]
***** 流程图
      [[file:images/%E6%9F%A5%E8%AF%A2%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8.jpg]]
***** 接口定义
      
      接口签名(proto 定义):
      #+BEGIN_SRC java
	syntax = "proto3";
	package deduction;
	enum StatusEnum{
	    SUCCESS = 0;
	    FAILED = 1;
	    UNKKNOWN = 2;
	}

	service Company {
	    // 查询扣费服务列表
	    rpc QueryDeductionListByUserIdAndArType(DeductionListQueryRequest)returns (DeductionListQueryResponse){}
	}

	// 是否需要分页?
	message DeductionListQueryRequest {
	    // 用户登录态token
	    string token = 1;
	    // 合约号
	    string arNo = 2;
	    // 用户Id
	    string userId = 3;
	}

	// 简化版产品信息, 用于列表展示
	message SimpliedProductInfo{
	    // 产品码
	    string productCode = 1;
	    // 产品名
	    string productName = 2;
	    // 产品所属主体
	    string proudctOrgName = 3;
	}

	message DeductionListQueryResponse{
	    // 处理状态, 成功, 失败, 处理中
	    string status = 1;
	    // 对应的状态码
	    string code = 2;
	    // 对应的消息或者描述
	    string desc = 3;
	    // 简化版产品信息
	    repeated SimpliedProductInfo simpliedProductInfo = 4;
	}

      #+END_SRC
      入参:

      | 参数名 | 参数类型 | 参数含义    | 必选 | 备注             |
      | toekn  | String   | 登录态toekn | Y    |                  |
      | arNo   | String   | 合约号      | Y    | 如扣费: 00000001 |
      | userId | String   | 用户Id      | Y    |                  |

      返回结果:

      | 参数名              | 参数类型            | 参数含义       | 必选 | 备注 |
      | status              | String              | 处理状态       | Y    |      |
      | code                | String              | 状态码         | Y    |      |
      | message             | String              | 返回结果描述   | N    |      |
      | simpliedProductInfo | List<SimpliedProductInfo> | 简化版产品信息 | N    |      |
      
      错误码:
      | 状态    | 状态码 | 描述       |
      | SUCCESS |     00 |            |
      | FAILED  |     03 | 用户未登录 |
      | FAILED  |     15 | 合约不存在 |

*** 详细设计
**** 产品信息
     本次使用到的产品信息:

     | 产品名                   |   产品码 | 所属主体           | 详情                                                                                                       |
     | 摩拜单车微信免密支付     | 00000001 | 摩拜单车           | 该服务将用于无余额时支付单车车费, 以及除单车外费用结算时的优先支付方式, 用户无需输入密码, 每日最多扣款20次 |
     | 上海公共交通微信免密支付 | 00000002 | 上海公共交通乘车码 | 刷码后自动通过微信支付扣取实际费用                                                                         |
**** 合约信息
     本次使用到的合约信息:
     | 合约名   |   合约号 | 合约版本 | 属性              |
     | 扣费合约 | 00000001 | 20200504 | 开通账号,扣款方式 |

** 测试分析
*** 测试用例
    | 场景             | 详细                         | 预期&校验点                                                                    |
    | 单设备登录       | 用户不存在登录               | 返回异常, 响应code为01, 描述为用户不存在, 服务端打印对应错误日志               |
    |                  | 用户存在, 登录密码错误       | 返回异常, 响应code为02, 描述为用户账号密码错误, 服务端打印对应错误日志         |
    |                  | 用户存在, 登录密钥正确       | 登录成功, 响应code为00, 返回结果包含token                                      |
    |                  | 两个用户登录同一个账户       | 两者皆登录成功, 返回结果皆包含token, 但先登录的用户token失效, 无法进行后续操作 |
    |                  | 两个用户登录同两个账户       | 两者皆登录成功, 返回结果皆包含token, 相互功能无影响                            |
    | 开通扣费服务     | 用户未登录                   | 操作失败, 响应code为03, 描述为用户未登录. 服务端打印对应错误日志               |
    |                  | 产品不存在                   | 操作失败, 响应code为14, 描述为产品不存在. 服务端打印对应错误日志               |
    |                  | 合约不存在                   | 操作失败, 响应code为15, 描述为合约不存在. 服务端打印对应错误日志               |
    |                  | 重复开通同一个产品的扣费服务 | 操作失败, 响应code为16, 描述为服务重复开通, 服务端打印对应错误日志             |
    |                  | 开通产品的扣费服务           | 操作成功, 响应为00.                                                            |
    | 关闭扣费服务     | 用户未登录                   | 操作失败, 响应code为03, 描述为用户未登录. 服务端打印对应错误日志               |
    |                  | 产品不存在                   | 操作失败, 响应code为14, 描述为产品不存在. 服务端打印对应错误日志               |
    |                  | 合约不存在                   | 操作失败, 响应code为15, 描述为合约不存在. 服务端打印对应错误日志               |
    |                  | 关闭不存在的扣费服务         | 操作失败, 响应为17, 描述为该用户未开通指定扣费产品. 服务端打印对应错误日志     |
    |                  | 关闭产品的扣费服务           | 操作成功, 响应为00                                                             |
    | 查询扣费服务列表 | 用户未登录                   | 操作失败, 响应code为03, 描述为用户未登录. 服务端打印对应错误日志               |
    |                  | 合约不存在                   | 操作失败, 响应code为15, 描述为合约不存在. 服务端打印对应错误日志               |
    |                  | 查询扣费服务列表             | 操作成功, 响应为00, 返回结果包含正常的扣费服务列表.                            |

*** 联调用例
    1. 使用指定账号密码进行登录, 获取token.
    2. 使用token, 上送合约类型, 产品码, 用户Id, 开通扣费服务.
    3. 使用token, 查询扣费服务列表, 理应展示刚才新增的扣费服务.
    4. 使用token, 上送合约类型, 产品码, 用户Id, 关闭扣费服务
    5. 使用token, 查询扣费服务列表, 理应展示空的扣费服务列表.
*** 资损点测试与回归
    本次迭代功能是与信息流相关, 不涉及资金流, 故理论无资损点需要测试与回归.
*** 测试记录
    测试数据:
    + 用户A:
    + 登录邮箱: ramsayleung@gmail.com
    + 密码: password
    + salt: 111111
    + 用户Id(userId): 00000001
    + 产品码(pdCode): 457680430309847040
    + 合约编号(arNo): 457681411894423554
    + 测试命令行: [[file:src/client/]]
    
    + 用户B:
    + 登录邮箱: xixihaha@outlook.com
    + 密码: ctext
    + userId: 00000002
**** 登录
***** 用户不存在
      使用错误的邮箱进行登录, 左边为client, 右边为server:
      [[file:images/%E7%99%BB%E5%BD%95-%E7%94%A8%E6%88%B7%E4%B8%8D%E5%AD%98%E5%9C%A8.jpg]]
***** 登录账密错误
      使用正确的邮箱, 错误的密码进行登录:
      [[file:images/%E7%99%BB%E5%BD%95-%E8%B4%A6%E5%AF%86%E9%94%99%E8%AF%AF.jpg]]
***** 登录成功
      使用正确的密码, 正确的邮箱登录:
      [[file:images/%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F.jpg]]
***** 两个用户登录同一个账号
      1. 使用终端1登录账号A, 登录成功
      2. 终端1登录状态校验成功
      3. 使用终端2登录账号A, 登录成功
      4. 终端2登录状态校验成功
      5. 终端1登录状态校验失败

      [[file:images/%E7%99%BB%E5%BD%95-%E4%B8%A4%E4%B8%AA%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%90%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7.jpg]]
      
***** 两个用户登录同两个账号
      1. 使用终端1登录账号A, 登录成功
      2. 终端1登录状态校验成功
      3. 使用终端2登录账号B, 登录成功
      4. 终端2登录状态校验成功

      [[file:images/%E7%99%BB%E5%BD%95-%E4%B8%A4%E4%B8%AA%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%A4%E4%B8%AA%E8%B4%A6%E5%8F%B7.jpg]]
**** 开通扣费服务
***** 用户未登录
      使用错误的token进行请求:

      [[file:images/%E5%BC%80%E9%80%9A-%E7%94%A8%E6%88%B7%E6%9C%AA%E7%99%BB%E5%BD%95.jpg]]
***** 产品不存在
      使用正确的token, 错误的产品码进行请求:

      [[file:images/%E5%BC%80%E9%80%9A-%E4%BA%A7%E5%93%81%E4%B8%8D%E5%AD%98%E5%9C%A8.jpg]]
***** 合约不存在
      使用正确的token, 正确的产品码, 错误的合约号进行请求:

      [[file:images/%E5%BC%80%E9%80%9A-%E5%90%88%E7%BA%A6%E4%B8%8D%E5%AD%98%E5%9C%A8.jpg]]
***** 正常开通
      使用正确的token, 正确的产品码, 正确的合约号, 正确的用户Id进行请求:
      
      [[file:images/%E5%BC%80%E9%80%9A-%E5%BC%80%E9%80%9A%E6%88%90%E5%8A%9F.jpg]]

      db新增对应的记录:
      [[file:images/%E5%BC%80%E9%80%9A-db%E8%AE%B0%E5%BD%95.jpg]]

***** 重复开通同一个产品的扣费服务
      使用已开通的扣费服务的参数重新请求
      [[file:images/%E5%BC%80%E9%80%9A-%E9%87%8D%E5%A4%8D%E5%BC%80%E9%80%9A.jpg]]

**** 关闭扣费服务
***** 用户未登录
      使用错误的token进行请求:

      [[file:images/%E5%85%B3%E9%97%AD-%E7%94%A8%E6%88%B7%E6%9C%AA%E7%99%BB%E5%BD%95.jpg]]
***** 产品不存在
      使用正确的token, 错误的产品码进行请求:

      [[file:images/%E5%85%B3%E9%97%AD-%E4%BA%A7%E5%93%81%E4%B8%8D%E5%AD%98%E5%9C%A8.jpg]]
***** 合约不存在
      使用正确的token, 正确的产品码, 错误的合约号进行请求:

      [[file:images/%E5%85%B3%E9%97%AD-%E5%90%88%E7%BA%A6%E4%B8%8D%E5%AD%98%E5%9C%A8.jpg]]
***** 正常关闭
      使用正确的token, 正确的产品码, 正确的合约号, 正确的用户Id进行请求:
      
      [[file:images/%E5%85%B3%E9%97%AD-%E6%AD%A3%E5%B8%B8%E5%85%B3%E9%97%AD.jpg]]
      db删除对应的记录:

      [[file:images/%E5%85%B3%E9%97%AD-db%E8%AE%B0%E5%BD%95.jpg]]
***** 关闭未建立关联的扣费服务
      使用已关闭的扣费服务的参数重新请求

      [[file:images/%E5%85%B3%E9%97%AD-%E5%85%B3%E9%97%AD%E6%9C%AA%E5%BC%80%E9%80%9A%E6%9C%8D%E5%8A%A1.jpg]]
**** 查询扣费服务列表
***** 用户未登录
      使用错误的token进行请求:

      [[file:images/%E6%9F%A5%E8%AF%A2%E5%88%97%E8%A1%A8-%E7%94%A8%E6%88%B7%E6%9C%AA%E7%99%BB%E5%BD%95.jpg]]
***** 合约不存在
      使用正确的token, 错误的合约号进行请求:
      [[file:images/%E6%9F%A5%E8%AF%A2%E5%88%97%E8%A1%A8-%E5%90%88%E7%BA%A6%E4%B8%8D%E5%AD%98%E5%9C%A8.jpg]]

***** 查询扣费服务列表成功
      使用正确的token, 正常的合约号, 正确的userId进行请求:

      [[file:images/%E6%9F%A5%E8%AF%A2%E5%88%97%E8%A1%A8-%E6%9F%A5%E8%AF%A2%E6%88%90%E5%8A%9F.jpg]]
** 发布计划
*** 发布时间
    2020-05-16-2020-05-26
*** 发布内容
    | 序号 | 功能                  | 涉及系统    | 开发负责人 | 测试负责人 |
    |    1 | 新应用fcdeduction上线 | fcdeduction | Ramsay     | Ramsay     |
*** 业务发布依赖
    这里的发布依赖指的是发布前需要的对应的下游系统先发布, 比如这次功能依赖了下游系统A的模块B, 那么在本功能发布上线之前, 系统A必须先发布, 否则应用都可能无法正常启动. 本次发布为新应用上线, 不涉及发布依赖.
*** 配置变更项
**** DML变更
     新增了四张表, de_prod, de_ar, de_user, de_user_ar_rel.
     [[file:conf/create_table.sql]]
**** DDL变更
     初始化对应的客户数据, 产品数据, 以及合约数据. 变更sql如下:
     [[file:conf/create_data.sql]]
*** 资损风险评估
    资损风险checkList:

    | 序号 | 风险类型       | 是否涉及 | 是否间接涉及 | 是否有风险 |
    |      | 幂等击穿       | 无       | 无           | 无         |
    |      | 资金放大或缩写 | 无       | 无           | 无         |
    |      | 币种错误       | 无       | 无           | 无         |
    |      | 漏验签         | 无       | 无           | 无         |
    |      | 足额扣款       | 无       | 无           | 无         |
    |      | 返回码映射     | 无       | 无           | 无         |
    |      | 对端幂等击穿   | 无       | 无           | 无         |
    |      | 补偿重发       | 无       | 无           | 无         |

    本次上线接口为信息流相关接口, 不涉及资金流相关, 评估下来不涉及资损.
*** 稳定性风险评估
    即本次改造对已有系统稳定性影响. 稳定性风险checkList:

    | 序号 | 评估项       | 影响评估 |
    |      | 幂等规则     | 无       |
    |      | 接口兼容性   | 无       |
    |      | 依赖系统变更 | 无       |
    |      | 数据兼容性   | 无       |
    |      | DB变更       | 无       |
    
    因为本次是新应用上线, 因此评估下来, 对已经系统无影响(原来系统都不存在)
*** 预发布&生产验证case

    | case                 |   |
    | 多设备登录同一账号   |   |
    | 增加关联扣费服务     |   |
    | 删除关联扣费服务     |   |
    | 查看关联扣费服务列表 |   |
*** 兼容性方案
**** 兼容性方案推演 
     本次因为是新应用上线, 非原来功能修改, 理论上不涉及新老代码及接口的兼容性问题.
*** 可监控
    本次应用上线, 不涉及原有监控变更, 本次迭代上线需要新增的监控:
    1. 统一Error日志监控.
    2. 性能监控, 各接口调用耗时.
*** 可灰度
    本次切流灰度计划:
    1. 预发布环境, 内部员工灰度, 灰度所有的集团员工, 预计灰度3天, 一切正常则生产发布.
    2. 1%流量灰度, 已有机器为100台, 灰度时, 打开单台机器灰度开关, 因为流量较小, 为了灰度彻底, 需要增长灰度时间, 预计灰度时间1周.
    3. 5%流量灰度, 新打开5台机器灰度开关, 保证机器分布在不同的机房, 确保不会因机房差异出现问题, 预计灰度时间为3-4天
    4. 10%流量灰度, 新打开单机房灰度开关(约10台), 此时流量较大, 灰度时间减少为2天
    5. 30%流量灰度, 打开30%机器的灰度开关, 灰度时间缩减为1天, 此步骤无问题后, 全量开启
    6. 全量开启, 打开所有机器的灰度开关.
       
    变更窗口期
    早上9:00-11:00, 下午16:00-17:30, 23:00-次日9:00.

    灰度时间:
    1. 2020-05-16下午, 变更窗口内开始灰度.
    2. 而后按照灰度计划进行灰度.
*** 可回滚
    本次为新应用上线, 不涉及回滚依赖顺序; 回滚依赖顺序即本系统为其他系统C的下游依赖, 在发布时先发布, 而后系统C再发布. 如果此时本系统出现异常, 需要回滚, 无法单独回滚, 因为系统C还依赖着咱们, 如果我们单独回滚, 会导致系统C也无法正常提供服务, 因此需要系统C先回滚, 而后本系统再回滚.
** 三方库依赖
   + protobuf(序列化框架&服务定义框架): https://github.com/protocolbuffers/protobuf/
   + grpc(rpc框架): https://github.com/grpc/grpc
   + hiredis(reids 数据管理): https://github.com/redis/hiredis
   + sqlpp11(数据访问): https://github.com/rbock/sqlpp11
   + sqlpp11-connector-mysql(数据连接器): https://github.com/rbock/sqlpp11-connector-mysql
   + spdlog(日志管理): https://github.com/gabime/spdlog
   + openssl(加解密): https://www.openssl.org/
** 成果
*** 技术要求
    - [√] =must= 使用 C++ 实现客户端（命令行交互即可）、服务端，代码风格良好.
    - [√] =must= 扣费服务数据需要存储，且需考虑数据安全和传输安全，存储选型不限.
    - [√] =must= 代码托管到 [[https://github.com/][Github]], 可见: https://github.com/ramsayleung/fcdeduction/actions
    - [√] =must= 使用 [[https://grpc.io][gRPC]] 框架, 可见: [[file:WORKSPACE]]
    - [√] =must= 使用 [[https://bazel.build/][bazel]] 管理编译, 可见: [[file:WORKSPACE]]
    - [√] =better= 使用 [[https://github.com/google/googletest][googletest]] 做单元测试, 可见: [[file:tests/]] 
    - [√] =better= 接入[[https://travis-ci.org/][Travis流水线]]. 接入流水线, 但接入了github action做持续集成, 而非Travis, 地址: https://github.com/ramsayleung/fcdeduction/actions, 使用github action 而非Travis原因可见我另外一个开源项目的讨论: [[https://github.com/ramsayleung/rspotify/pull/73][Use github actions instead of travis]]
      
*** 如何编译
    安装 [[https://bazel.build/][bazel]]
    #+BEGIN_SRC sh
      git clone git@github.com:ramsayleung/fcdeduction.git
      cd fcdeduction
      bazel build //...
      # 如果mac 系统编译失败, 可使用 bazel build //... --copt -DGRPC_BAZEL_BUILD 代替
    #+END_SRC 
*** 如何使用
    + 导入建表sql: =mysql -uroot  -ppassword  <conf/create_table.sql=
    + 导入数据创建sql: =mysql -uroot  -ppassword  <conf/create_table.sql=
    + 运行测试用例:
      #+BEGIN_SRC sh
	bazel test --test_output=all --cache_test_results=no --action_env="GTEST_COLOR=1" //... --copt -DGRPC_BAZEL_BUILD --test_env=mysql_password=你的数据库root密码 --test_env=app_env=test
      #+END_SRC
    + 运行服务端
      #+BEGIN_SRC sh
	mysql_password=root密码 ./bazel-bin/src/server_starter
      #+END_SRC
    + 运行客户端
      - 用户登录
	#+BEGIN_SRC sh
	  ./bazel-bin/src/user_client -- --key ramsayleung@gmail.com --value password
	  # 用法:
	  # --key: 指登录外标, 如邮箱
	  # --value: 登录凭证, 如密码
	  # --target: 远程服务, 如samray.me:50051
	  # 返回结果:
	  #[2020-05-12 22:36:08.778] [info] 用户登录: loginKey:ramsayleung@gmail.com, loginValue: password
	  #[2020-05-12 22:36:08.795] [info] UserFacade.Login() response: status:SUCCESS, code:00, desc:
	  #[2020-05-12 22:36:08.795] [info] UserFacade.Login() successfully: token:2c65bdfe-9dba-4c62-86d7-8364be15560a
	#+END_SRC
	运行截图:
	[[file:images/%E7%99%BB%E5%BD%95.gif]]
      - 登录态鉴权
	#+BEGIN_SRC sh
	  ./bazel-bin/src/user_client -- --token 2c65bdfe-9dba-4c62-86d7-8364be15560a
	  # 用法
	  # --token: 登录成功后的token
	  # --target: 远程服务, 如samray.me:50051
	  # 返回结果
	  #[2020-05-12 22:39:13.613] [info] 登录态校验: token:2c65bdfe-9dba-4c62-86d7-8364be15560a
	  #[2020-05-12 22:39:14.735] [info] UserFacade.validateLoginSession() response: status:SUCCESS, code:00, desc:
	#+END_SRC
	运行截图:
	[[file:images/%E9%89%B4%E6%9D%83.gif]]
      - 开通扣费服务
	#+BEGIN_SRC sh
	  ./bazel-bin/src/deduction_client --token 2c65bdfe-9dba-4c62-86d7-8364be15560a --arno 457681411894423554 --pdcode 457680430309847041  --userid 00000001 --interface create
	  # 用法
	  # --token: 登录态token
	  # --arno: 合约号
	  # --pdcode: 产品码
	  # --userid: 用户Id
	  # --interface: 接口名, 目前仅支持 create, close, querylist
	  # --target: 远程服务, 如samray.me:50051
	  # 返回结果
	  # [2020-05-12 22:41:44.027] [info] 开通服务: token:2c65bdfe-9dba-4c62-86d7-8364be15560a, arNo: 457681411894423554, pdCode: 457680430309847041, userId: 00000001
	  # [2020-05-12 22:41:44.117] [info] DeductionFacade.create() response: status:SUCCESS, code:00, desc:
	#+END_SRC
	运行截图:
	[[file:images/%E5%BC%80%E9%80%9A.gif]]
      - 关闭扣费服务
	#+BEGIN_SRC sh
	  ./bazel-bin/src/deduction_client --token 2c65bdfe-9dba-4c62-86d7-8364be15560a --arno 457681411894423554 --pdcode 457680430309847041  --userid 00000001 --interface close
	  # 用法
	  # --token: 登录态token
	  # --arno: 合约号
	  # --pdcode: 产品码
	  # --userid: 用户Id
	  # --interface: 接口名, 目前仅支持 create, close, querylist
	  # 返回结果
	  # [2020-05-12 22:45:45.831] [info] 关闭服务: token:2c65bdfe-9dba-4c62-86d7-8364be15560a, arNo: 457681411894423554, pdCode: 457680430309847041, userId: 00000001
	  # [2020-05-12 22:45:45.899] [info] DeductionFacade.close() response: status:SUCCESS, code:00, desc:
	#+END_SRC
	运行截图:
	[[file:images/%E5%85%B3%E9%97%AD.gif]]
      - 查询扣费服务列表
	#+BEGIN_SRC sh
	  ./bazel-bin/src/deduction_client --token 2c65bdfe-9dba-4c62-86d7-8364be15560a --arno 457681411894423554 --userid 00000001 --interface querylist
	  # 用法:
	  # --token: 登录态token
	  # --arno: 合约号
	  # --userid: 用户Id
	  # --interface: 接口名, 目前仅支持 create, close, querylist
	  # --target: 远程服务, 如samray.me:50051
	  # 返回结果:
	  # [2020-05-12 22:47:40.508] [info] 查询服务列表: token:2c65bdfe-9dba-4c62-86d7-8364be15560a, arNo: 457681411894423554, userId: 00000001, pageIndex: 0, pageSize: 20
	  # [2020-05-12 22:47:42.155] [info] DeductionFacade.queryList() response: status:SUCCESS, code:00, desc:
	  # [2020-05-12 22:47:42.155] [info] 扣费服务列表: 产品码:457680430309847040, 产品名:摩拜单车微信免密支付, 产品所属机构:摩拜单车
	#+END_SRC
	运行截图:
	[[file:images/%E6%9F%A5%E8%AF%A2%E5%88%97%E8%A1%A8.gif]]
*** 交付物
**** 源代码, 设计文档, 说明文档
     [[https://github.com/ramsayleung/fcdeduction]]
**** 已部署好的服务端
     服务端访问地址 samray.me:50051
     运行截图:
     [[file:images/%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF.gif]]
     #+BEGIN_SRC sh
       bazel run //src:user_client -- --key ramsayleung@gmail.com --value password --target samray.me:50051
       # 增加上 --target samray.me:50051 选项.
     #+END_SRC
**** 可运行的客户端
     + c++ 客户端, 需要手动编译 [[file:src/client/]]
** 参考资料
   [[file:PRD-%E6%89%A3%E8%B4%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.md][PRD-扣费管理中心]]
