* fcdeduction
  a typical deduction system(一个典型的扣费系统设计与实现)
** 背景
*** 应用命名
    应用命名为 =fcdeduction=, 按照惯例, =fc= 指代对应的租户(=fc= 为 financial cloud, 意为金融云), =deduction= 指扣费系统.
*** 业务背景
    目前支付业务在对外输出的场景中, 为了提高业务体验, 会为客户提供对应扣费服务, 如摩拜的免密支付, 公共交通的免密支付服务等, 原来的扣费服务耦合在支付业务中, 业务能力边界不清晰, 因此现在将扣费服务从原来支付业务中剥离, 新增扣费服务平台, 负责管理相关的扣费服务.
*** 名词解释
    | 涉及名词   | 英文简称 | 详细说明                                                                                                                                                     |
    | 单设备登录 |          | 同一用户在同一时刻只能在一个设备上保持登录态                                                                                                                 |
    | 产品码     |          | 每个服务都是对应的产品, 每个产品都有对应的产品码                                                                                                             |
    | 扣费合约   |          | 每个产品和每个用户都是独立存在的, 通过合约将用户与对应的产品服务建立关联, 扣费合约指代的是建立该关联的目的是作扣费之用, 类似的合约还有收单合约, 绑卡合约等等 |
*** 功能拆分
    后端服务:
    
    | 功能点           | 对应开发 | 开发时间 | 自测时间 |
    | 单设备登录       | Ramsay   |       2D |       1D |
    | 开通扣费服务     | Ramsay   |       2D |       1D |
    | 关闭扣费服务     | Ramsay   |       2D |       1D |
    | 查看扣费服务列表 | Ramsay   |       2D |       1D |

    前端页面:
    | 对应页面         | 对应开发 | 开发时间 | 自测时间 |
    | 登录页面         | Ramsay   |       1D |       1D |
    | 开通扣费服务     | Ramsay   |       1D |       1D |
    | 关闭扣费服务     | Ramsay   |       1D |       1D |
    | 查看扣费服务列表 | Ramsay   |       1D |       1D |

** 系统分析
*** 总体设计
**** 上下游系统依赖关系图:

     [[file:images/%E4%B8%8A%E4%B8%8B%E9%81%8A%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg]]
**** 用例图:

     [[file:images/%E7%94%A8%E4%BE%8B%E5%9B%BE.jpg]]

     + 蓝色: 本期实现
     + 灰色: 本期不实现
     + 绿色: 已有功能, 不涉及修改(本期为新增应用, 不涉及原有功能)
     + 绿色: 已有功能, 涉及修改(本期为新增应用, 不涉及原有功能)
**** 模型:
     (其中的合约中心, 用户中心, 产品中心都在本次系分中以单表代替, 实际上中台提供的能力会复杂很多)
    
     [[file:images/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B.jpg]]
**** 关键技术
***** 保持登录
      针对我们无线设备而言，很多APP我们的感知就是只有首次登陆需要密码, 以后就可以自动登录, 这就是一种保持登录的技术, 因为用户的感知是直接就进入到了登录态, 所以叫做保持登录, 其实并不是保持了一个一直不失效的登录态. 实现原理是在用户第一次登陆的时候, =将refresh_token=, =expire_time= 和 =sessionId= 一起返回客户端, =refresh_token= 可以理解成是第二次请求服务端刷新 =sessionId= 的凭证，然后客户端在 =sessionId= 快要过期的时候，通过 =refresh_token= 重新获取新的 =sessionId= 和 =refresh_token=, 并且循环这个过程，这样就可以在用户无感知的情况下保持用户登录.
***** 数据安全
      1. 服务端关键信息的日志信息打印需要进行脱敏处理
      2. 客户端/PC端调用后端服务时, 理应使用https协议保证数据安全与通信安全, 由对应的网关进行转换, 将http请求转换为对应的RPC服务调用, 调用返回结果也要做相反的转换, 将rpc结果转换成http响应
***** 幂等设计
      1. 在开通扣费服务时, 要确保同一个用户不会重复开通同一个扣费服务, 又因为服务与用户是通过合约关联起来的, 所以就是要确保, 扣费合约+产品码+用户Id唯一, 目前此幂等规则是通过数据库唯一键约束.
      2. 关闭扣费服务的时候, 要确保多次关闭的效果与单次关闭效果一致, 即N=NP.
      3. 查询扣费列表不涉及幂等规则, 因为查询天然幂等.
**** 物理模型
     de_prod(产品表, prod指product)
     主键: tnt_inst_id + pd_code
     | 字段名       | 是否为空 | 类型          | 说明     |
     | tnt_inst_id  | N        | varchar(8)    | 租户Id   |
     | pd_code      | N        | varchar(32)   | 产品码   |
     | pd_name      | N        | varchar(255)  | 产品名称 |
     | pd_desc      | N        | varchar(2048) | 产品描述 |
     | gmt_create   | N        | datetime(12)  | 创建时间 |
     | gmt_modified | N        | datetime(12)  | 修改时间 |
     | memo         | Y        | varchar(255)  | 备注     |
     
     de_ar(合约表, ar指arrangement)
     主键: tnt_inst_id + ar_number
     | 字段名       | 是否为空 | 类型         | 说明                                                 |
     | tnt_inst_id  | N        | varchar(8)   | 租户Id                                               |
     | ar_number    | N        | varchar(32)  | 合约号                                               |
     | ar_name      | N        | varchar(255) | 合约名称                                             |
     | ar_status    | N        | varchar(8)   | 合约状态, 1:未生效; 2:已生效; 3:失效; 4:取消; 5:作废 |
     | ar_version   | N        | varchar(32)  | 合约版本                                             |
     | gmt_create   | N        | datetime(12) | 创建时间                                             |
     | gmt_modified | N        | datetime(12) | 修改时间                                             |
     | memo         | Y        | varchar(255) | 备注                                                 |
     
     de_user(用户表)
     主键: tnt_inst_id + user_id
     | 字段名       | 是否为空 | 类型         | 说明     |
     | tnt_inst_id  | N        | varchar(8)   | 租户Id   |
     | user_id      | N        | varchar(32)  | 用户Id   |
     | user_name    | N        | varchar(255) | 用户名称 |
     | user_status  | N        | varchar(8)   | 用户状态 |
     | user_type    | N        | varchar(32)  | 用户类型 |
     | gmt_create   | N        | datetime(12) | 创建时间 |
     | gmt_modified | N        | datetime(12) | 修改时间 |

     de_user_ar(用户合约关系表):
     主键: tnt_inst_id + rel, 唯一键: user_id + pd_code + ar_no + ar_status
     | 字段名       | 是否为空 | 类型         | 说明     |
     | tnt_inst_id  | N        | varchar(8)   | 租户Id   |
     | rel_id       | N        | varchar(32)  | 关系Id   |
     | user_id      | N        | varchar(32)  | 用户Id   |
     | pd_code      | N        | varchar(32)  | 产品码   |
     | ar_no        | N        | varchar(32)  | 合约码   |
     | ar_status    | N        | varchar(8)   | 合约状态 |
     | gmt_create   | N        | datetime(12) | 创建时间 |
     | gmt_modified | N        | datetime(12) | 修改时间 |
     | memo         | Y        | varchar(255) | 备注       |
*** 功能设计
**** 单设备登录
     用户通过账密正常登录; 如果存在多端同时登录, 只允许最近一次登录态存在(本次demo中, 主要流程是扣费, 不存在注册的流程, 因此客户都是通过db插入进行初始化的.)
***** 流程图
      正常登录流程:

      [[file:images/%E6%AD%A3%E5%B8%B8%E7%99%BB%E5%BD%95.jpg]]
      
      单设备登录:
      
      [[file:images/%E5%8D%95%E8%AE%BE%E5%A4%87%E7%99%BB%E5%BD%95.jpg]]
***** 接口定义
      接口签名:
      
      入参:

      | 参数名 | 参数类型 | 参数含义 | 必选 | 备注 |
      |        |          |          |      |      |

      返回结果:

      | 参数名 | 参数类型 | 参数含义 | 必选 | 备注 |
      |        |          |          |      |      |

**** 开通扣费服务
**** 关闭扣费服务
**** 查询扣费服务列表
*** 兼容性方案
**** 兼容性方案推演 
     本次因为是新应用上线, 非原来功能修改, 理论上不涉及兼容性问题.
**** 切流计划
     本次切流灰度计划:
     1. 预发布环境, 内部员工灰度, 灰度所有的集团员工, 预计灰度3天, 一切正常则生产发布.
     2. 1%流量灰度, 已有机器为100台, 灰度时, 打开单台机器灰度开关, 因为流量较小, 为了灰度彻底, 需要增长灰度时间, 预计灰度时间1周.
     3. 5%流量灰度, 新打开5台机器灰度开关, 保证机器分布在不同的机器, 确保不会因机器差异出现问题, 预计灰度时间为3-4天
     4. 10%流量灰度, 新打开单机房灰度开关(约10台), 此时流量较大, 灰度时间减少为2天
     5. 30%流量灰度, 打开30%机器的灰度开关, 灰度时间缩减为1天, 此步骤无问题后, 全量开启
     6. 全量开启, 打开所有机器的灰度开关.
** 测试分析
** 发布计划
** 参考资料
   [[file:PRD-%E6%89%A3%E8%B4%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.md][PRD-扣费管理中心]]
