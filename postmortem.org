* 扣费中心技术复盘
** 目标
   1. 解决单设备登录问题.
   2. 提供扣费服务生命周期管理, 包括为用户新增扣费服务, 关闭扣费服务等.
** 现状
*** 服务拆分/能力复用
    在蚂蚁金服, 会有单独的客户平台, 单独负责开户体系, 登录体系, 认证体系以及对应的客户信息管理体系, 通过体系化, 标准化的方式提供客户能力, 实现平台能力与业务代码的分离, 而非与业务系统耦合在一起, 形成大而全的烟囱式的系统.
    
*** 扩展开发&能力组合

    在推行SOA/中台化的公司, 平台具备足够的开放性, 满足场景的多样性, 进而解决研发的效率问题, 加快业务创新的速度, 同时易于扩展, 在底层代码稳定性的基础上, 尽可能通过简单配置, 较少改动, 扩展开发, 即能完成新场景的接入.

    在蚂蚁金服, 有单独的合约平台, 产品平台, 客户平台等业务域, 配合小而精的业务开发团队, 通过业务域与业务团队的配合, 快速, 高效地开发出新产品和新功能, 如在本次扣费服务场景中, 通过在产品域定义对应的产品, 然后使用扣费合约将产品与客户关联起来, 以此为客户提供扣费服务.

    业务平台具有对应的业务属性, 通过集合可复用的技术能力及业务能力, 解决一些通用的业务问题, 通过业务的通用能力给业务开发团队提效, 如通过组合业务域为扣费服务赋能.

** 局限

   目前支付业务在对外输出的场景中, 为了提高业务体验, 会为客户提供对应扣费服务, 如摩拜的免密支付, 公共交通的免密支付服务等, 原来的扣费服务耦合在支付业务中, 业务能力边界不清晰.
   
   此外单设备登录与扣费业务逻辑耦合在一起, 两个完全不同业务域负责的模块, 不是同一纬度的功能, 不应该耦合在一起, 这样既提高了维护成本, 也降低了研发效率.
   
   新增扣费服务只能用于单独的扣费服务, 不能赋能于其他场景, 只能做成烟囱式服务.

** 突破想法

   [[file:images/%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%83%B3%E6%B3%95.jpg]]

   1. 完善登录体系, 支持单设备登录, 及多种登录方式
   2. 完善扣费服务模式, 支持开通服务, 暂停服务, 关闭服务.
   3. 服务化, 实现服务拆分及能力复用, 建立客户域, 合约域及产品域, 在此之上构建赋能其他场景
   4. 高效, 快速开发新服务.

** 设计验证

   + 提出假设: 
     - 能力抽象: 能否抽象出统一的业务底层能力, 提供对应的平台能力, 能通过组合平台能力快速适配场景.
   + 业务调研:
     - 调研已有系统, 调研已有蚂蚁金服/阿里巴巴的服务化方案, 对照着场景参考其打法.
   + 流程推演:
     针对已有的场景, 服务化后的平台能力, 扮演功能实现及链路交互.

** 实验
   github上的fcdeduction代码仓库即是实验, 而且是已经实现的实验. 通过对应的表及dao操作, 模拟不同平台提供的能力, 以此来模拟SOA化.
*** 实验方案:

    + 设计模拟服务化的方案, 开发对应demo.
    + 参照demo, 对照蚂蚁已有业务域, 比较差异点及现状.
    + 实际效果与预期差异, 能否通过组合平台能力快速开发新场景业务代码.

    实验过程及实验记录: https://github.com/ramsayleung/fcdeduction
*** 实验结果

    demo与已有系统差异:
    1. 实验demo具备基础服务化能力, 实现业务平台的基础能力
    2. 实验demo未达到已有系统的复杂度, 并且没有历史包袱, 实现起来更容易

    实际效果与预期差异:
    1. 业务平台能提供通用能力, 但对于个性化需求, 平台无法兼顾, 平台只能做到大而通用; 如通过合约关联产品与用户的方式, 如果不同的产品需要定义不一样的规则, 那么规则可落在合约, 通过合约来限制产品, 那么就要求合约能提供灵活的规则定义, 否则无法满足多样的业务规则.
    2. 链路复杂程度增加; 服务化后各模块完全相对独立和松耦合, 实现单个功能要调用多个模块, 链路变长变复杂, 集成复杂度增加，任何彻底的分解都将带来集成的复杂度. 服务化后需要额外的治理成本及运维成本.

** 结论
   软件工程没有银弹(针对所有场景的最优解决方案), 任何的方案都是在作取舍.

   使用服务化来实现扣费服务开发:
   优点:
   - 模板拆分, 能力复用, 实现平台能力与业务代码的解耦, 易于能力开放.
   - 在大部分情况下, 能以更少的改动, 扩展开发的形式开发新场景业务.
     
   不足:
   - 增加链路复杂性, 增加维护成本及服务治理成本.
   - 需要业务平台足够抽象, 才能应对场景的多样性, 但提高抽象度又增加了理解难度.
     
   使用二八原则作取舍, 使用服务化来实现扣费服务开发, 通过增加链路复杂度及提高平台抽象要求为成本, 来实现不同场景的赋能及扩展. 并且, 服务化有相当大的实施可行性, 国内外的企业也有诸多成功的先例.

   - 得出自己的结论, 包括可行性分析结论, 风险及问题总结.
   - 方案实施的可行性.

** 展望
   + 业务支撑: 理解业务, 关注细节
   + 核心链路保障: 体系化方法, 纵观全盘, 敬畏之心
   + 方法沉淀: 思考, 总结, 提升的过程.
   + 系统设计: 架构实践, 理论应用
