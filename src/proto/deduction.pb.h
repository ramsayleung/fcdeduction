// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deduction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_deduction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_deduction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deduction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_deduction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deduction_2eproto;
namespace deduction {
class DeduceRequest;
class DeduceRequestDefaultTypeInternal;
extern DeduceRequestDefaultTypeInternal _DeduceRequest_default_instance_;
class DeduceResponse;
class DeduceResponseDefaultTypeInternal;
extern DeduceResponseDefaultTypeInternal _DeduceResponse_default_instance_;
class DeductionListQueryRequest;
class DeductionListQueryRequestDefaultTypeInternal;
extern DeductionListQueryRequestDefaultTypeInternal _DeductionListQueryRequest_default_instance_;
class DeductionListQueryResponse;
class DeductionListQueryResponseDefaultTypeInternal;
extern DeductionListQueryResponseDefaultTypeInternal _DeductionListQueryResponse_default_instance_;
class SimpliedProductInfo;
class SimpliedProductInfoDefaultTypeInternal;
extern SimpliedProductInfoDefaultTypeInternal _SimpliedProductInfo_default_instance_;
}  // namespace deduction
PROTOBUF_NAMESPACE_OPEN
template<> ::deduction::DeduceRequest* Arena::CreateMaybeMessage<::deduction::DeduceRequest>(Arena*);
template<> ::deduction::DeduceResponse* Arena::CreateMaybeMessage<::deduction::DeduceResponse>(Arena*);
template<> ::deduction::DeductionListQueryRequest* Arena::CreateMaybeMessage<::deduction::DeductionListQueryRequest>(Arena*);
template<> ::deduction::DeductionListQueryResponse* Arena::CreateMaybeMessage<::deduction::DeductionListQueryResponse>(Arena*);
template<> ::deduction::SimpliedProductInfo* Arena::CreateMaybeMessage<::deduction::SimpliedProductInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace deduction {

enum StatusEnum : int {
  SUCCESS = 0,
  FAILED = 1,
  UNKKNOWN = 2,
  StatusEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatusEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatusEnum_IsValid(int value);
constexpr StatusEnum StatusEnum_MIN = SUCCESS;
constexpr StatusEnum StatusEnum_MAX = UNKKNOWN;
constexpr int StatusEnum_ARRAYSIZE = StatusEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusEnum_descriptor();
template<typename T>
inline const std::string& StatusEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusEnum_descriptor(), enum_t_value);
}
inline bool StatusEnum_Parse(
    const std::string& name, StatusEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusEnum>(
    StatusEnum_descriptor(), name, value);
}
// ===================================================================

class DeduceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deduction.DeduceRequest) */ {
 public:
  DeduceRequest();
  virtual ~DeduceRequest();

  DeduceRequest(const DeduceRequest& from);
  DeduceRequest(DeduceRequest&& from) noexcept
    : DeduceRequest() {
    *this = ::std::move(from);
  }

  inline DeduceRequest& operator=(const DeduceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeduceRequest& operator=(DeduceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeduceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeduceRequest* internal_default_instance() {
    return reinterpret_cast<const DeduceRequest*>(
               &_DeduceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeduceRequest& a, DeduceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeduceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeduceRequest* New() const final {
    return CreateMaybeMessage<DeduceRequest>(nullptr);
  }

  DeduceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeduceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeduceRequest& from);
  void MergeFrom(const DeduceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeduceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deduction.DeduceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deduction_2eproto);
    return ::descriptor_table_deduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kArrangementTypeFieldNumber = 2,
    kProductCodeFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string arrangementType = 2;
  void clear_arrangementtype();
  const std::string& arrangementtype() const;
  void set_arrangementtype(const std::string& value);
  void set_arrangementtype(std::string&& value);
  void set_arrangementtype(const char* value);
  void set_arrangementtype(const char* value, size_t size);
  std::string* mutable_arrangementtype();
  std::string* release_arrangementtype();
  void set_allocated_arrangementtype(std::string* arrangementtype);
  private:
  const std::string& _internal_arrangementtype() const;
  void _internal_set_arrangementtype(const std::string& value);
  std::string* _internal_mutable_arrangementtype();
  public:

  // string productCode = 3;
  void clear_productcode();
  const std::string& productcode() const;
  void set_productcode(const std::string& value);
  void set_productcode(std::string&& value);
  void set_productcode(const char* value);
  void set_productcode(const char* value, size_t size);
  std::string* mutable_productcode();
  std::string* release_productcode();
  void set_allocated_productcode(std::string* productcode);
  private:
  const std::string& _internal_productcode() const;
  void _internal_set_productcode(const std::string& value);
  std::string* _internal_mutable_productcode();
  public:

  // string userId = 4;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // @@protoc_insertion_point(class_scope:deduction.DeduceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arrangementtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deduction_2eproto;
};
// -------------------------------------------------------------------

class DeduceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deduction.DeduceResponse) */ {
 public:
  DeduceResponse();
  virtual ~DeduceResponse();

  DeduceResponse(const DeduceResponse& from);
  DeduceResponse(DeduceResponse&& from) noexcept
    : DeduceResponse() {
    *this = ::std::move(from);
  }

  inline DeduceResponse& operator=(const DeduceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeduceResponse& operator=(DeduceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeduceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeduceResponse* internal_default_instance() {
    return reinterpret_cast<const DeduceResponse*>(
               &_DeduceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeduceResponse& a, DeduceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeduceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeduceResponse* New() const final {
    return CreateMaybeMessage<DeduceResponse>(nullptr);
  }

  DeduceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeduceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeduceResponse& from);
  void MergeFrom(const DeduceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeduceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deduction.DeduceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deduction_2eproto);
    return ::descriptor_table_deduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCodeFieldNumber = 2,
    kDescFieldNumber = 3,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // @@protoc_insertion_point(class_scope:deduction.DeduceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deduction_2eproto;
};
// -------------------------------------------------------------------

class DeductionListQueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deduction.DeductionListQueryRequest) */ {
 public:
  DeductionListQueryRequest();
  virtual ~DeductionListQueryRequest();

  DeductionListQueryRequest(const DeductionListQueryRequest& from);
  DeductionListQueryRequest(DeductionListQueryRequest&& from) noexcept
    : DeductionListQueryRequest() {
    *this = ::std::move(from);
  }

  inline DeductionListQueryRequest& operator=(const DeductionListQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeductionListQueryRequest& operator=(DeductionListQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeductionListQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeductionListQueryRequest* internal_default_instance() {
    return reinterpret_cast<const DeductionListQueryRequest*>(
               &_DeductionListQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeductionListQueryRequest& a, DeductionListQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeductionListQueryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeductionListQueryRequest* New() const final {
    return CreateMaybeMessage<DeductionListQueryRequest>(nullptr);
  }

  DeductionListQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeductionListQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeductionListQueryRequest& from);
  void MergeFrom(const DeductionListQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeductionListQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deduction.DeductionListQueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deduction_2eproto);
    return ::descriptor_table_deduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kArrangementTypeFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kPageIndexFieldNumber = 4,
    kPageSizeFieldNumber = 5,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string arrangementType = 2;
  void clear_arrangementtype();
  const std::string& arrangementtype() const;
  void set_arrangementtype(const std::string& value);
  void set_arrangementtype(std::string&& value);
  void set_arrangementtype(const char* value);
  void set_arrangementtype(const char* value, size_t size);
  std::string* mutable_arrangementtype();
  std::string* release_arrangementtype();
  void set_allocated_arrangementtype(std::string* arrangementtype);
  private:
  const std::string& _internal_arrangementtype() const;
  void _internal_set_arrangementtype(const std::string& value);
  std::string* _internal_mutable_arrangementtype();
  public:

  // string userId = 3;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string pageIndex = 4;
  void clear_pageindex();
  const std::string& pageindex() const;
  void set_pageindex(const std::string& value);
  void set_pageindex(std::string&& value);
  void set_pageindex(const char* value);
  void set_pageindex(const char* value, size_t size);
  std::string* mutable_pageindex();
  std::string* release_pageindex();
  void set_allocated_pageindex(std::string* pageindex);
  private:
  const std::string& _internal_pageindex() const;
  void _internal_set_pageindex(const std::string& value);
  std::string* _internal_mutable_pageindex();
  public:

  // string pageSize = 5;
  void clear_pagesize();
  const std::string& pagesize() const;
  void set_pagesize(const std::string& value);
  void set_pagesize(std::string&& value);
  void set_pagesize(const char* value);
  void set_pagesize(const char* value, size_t size);
  std::string* mutable_pagesize();
  std::string* release_pagesize();
  void set_allocated_pagesize(std::string* pagesize);
  private:
  const std::string& _internal_pagesize() const;
  void _internal_set_pagesize(const std::string& value);
  std::string* _internal_mutable_pagesize();
  public:

  // @@protoc_insertion_point(class_scope:deduction.DeductionListQueryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arrangementtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pageindex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pagesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deduction_2eproto;
};
// -------------------------------------------------------------------

class SimpliedProductInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deduction.SimpliedProductInfo) */ {
 public:
  SimpliedProductInfo();
  virtual ~SimpliedProductInfo();

  SimpliedProductInfo(const SimpliedProductInfo& from);
  SimpliedProductInfo(SimpliedProductInfo&& from) noexcept
    : SimpliedProductInfo() {
    *this = ::std::move(from);
  }

  inline SimpliedProductInfo& operator=(const SimpliedProductInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpliedProductInfo& operator=(SimpliedProductInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpliedProductInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpliedProductInfo* internal_default_instance() {
    return reinterpret_cast<const SimpliedProductInfo*>(
               &_SimpliedProductInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SimpliedProductInfo& a, SimpliedProductInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpliedProductInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpliedProductInfo* New() const final {
    return CreateMaybeMessage<SimpliedProductInfo>(nullptr);
  }

  SimpliedProductInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpliedProductInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpliedProductInfo& from);
  void MergeFrom(const SimpliedProductInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpliedProductInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deduction.SimpliedProductInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deduction_2eproto);
    return ::descriptor_table_deduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductCodeFieldNumber = 1,
    kProductNameFieldNumber = 2,
    kProudctOrgNameFieldNumber = 3,
  };
  // string productCode = 1;
  void clear_productcode();
  const std::string& productcode() const;
  void set_productcode(const std::string& value);
  void set_productcode(std::string&& value);
  void set_productcode(const char* value);
  void set_productcode(const char* value, size_t size);
  std::string* mutable_productcode();
  std::string* release_productcode();
  void set_allocated_productcode(std::string* productcode);
  private:
  const std::string& _internal_productcode() const;
  void _internal_set_productcode(const std::string& value);
  std::string* _internal_mutable_productcode();
  public:

  // string productName = 2;
  void clear_productname();
  const std::string& productname() const;
  void set_productname(const std::string& value);
  void set_productname(std::string&& value);
  void set_productname(const char* value);
  void set_productname(const char* value, size_t size);
  std::string* mutable_productname();
  std::string* release_productname();
  void set_allocated_productname(std::string* productname);
  private:
  const std::string& _internal_productname() const;
  void _internal_set_productname(const std::string& value);
  std::string* _internal_mutable_productname();
  public:

  // string proudctOrgName = 3;
  void clear_proudctorgname();
  const std::string& proudctorgname() const;
  void set_proudctorgname(const std::string& value);
  void set_proudctorgname(std::string&& value);
  void set_proudctorgname(const char* value);
  void set_proudctorgname(const char* value, size_t size);
  std::string* mutable_proudctorgname();
  std::string* release_proudctorgname();
  void set_allocated_proudctorgname(std::string* proudctorgname);
  private:
  const std::string& _internal_proudctorgname() const;
  void _internal_set_proudctorgname(const std::string& value);
  std::string* _internal_mutable_proudctorgname();
  public:

  // @@protoc_insertion_point(class_scope:deduction.SimpliedProductInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proudctorgname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deduction_2eproto;
};
// -------------------------------------------------------------------

class DeductionListQueryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deduction.DeductionListQueryResponse) */ {
 public:
  DeductionListQueryResponse();
  virtual ~DeductionListQueryResponse();

  DeductionListQueryResponse(const DeductionListQueryResponse& from);
  DeductionListQueryResponse(DeductionListQueryResponse&& from) noexcept
    : DeductionListQueryResponse() {
    *this = ::std::move(from);
  }

  inline DeductionListQueryResponse& operator=(const DeductionListQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeductionListQueryResponse& operator=(DeductionListQueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeductionListQueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeductionListQueryResponse* internal_default_instance() {
    return reinterpret_cast<const DeductionListQueryResponse*>(
               &_DeductionListQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeductionListQueryResponse& a, DeductionListQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeductionListQueryResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeductionListQueryResponse* New() const final {
    return CreateMaybeMessage<DeductionListQueryResponse>(nullptr);
  }

  DeductionListQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeductionListQueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeductionListQueryResponse& from);
  void MergeFrom(const DeductionListQueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeductionListQueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deduction.DeductionListQueryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deduction_2eproto);
    return ::descriptor_table_deduction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimpliedProductInfoFieldNumber = 4,
    kStatusFieldNumber = 1,
    kCodeFieldNumber = 2,
    kDescFieldNumber = 3,
  };
  // repeated .deduction.SimpliedProductInfo simpliedProductInfo = 4;
  int simpliedproductinfo_size() const;
  private:
  int _internal_simpliedproductinfo_size() const;
  public:
  void clear_simpliedproductinfo();
  ::deduction::SimpliedProductInfo* mutable_simpliedproductinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deduction::SimpliedProductInfo >*
      mutable_simpliedproductinfo();
  private:
  const ::deduction::SimpliedProductInfo& _internal_simpliedproductinfo(int index) const;
  ::deduction::SimpliedProductInfo* _internal_add_simpliedproductinfo();
  public:
  const ::deduction::SimpliedProductInfo& simpliedproductinfo(int index) const;
  ::deduction::SimpliedProductInfo* add_simpliedproductinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deduction::SimpliedProductInfo >&
      simpliedproductinfo() const;

  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // @@protoc_insertion_point(class_scope:deduction.DeductionListQueryResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deduction::SimpliedProductInfo > simpliedproductinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deduction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeduceRequest

// string token = 1;
inline void DeduceRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeduceRequest::token() const {
  // @@protoc_insertion_point(field_get:deduction.DeduceRequest.token)
  return _internal_token();
}
inline void DeduceRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:deduction.DeduceRequest.token)
}
inline std::string* DeduceRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:deduction.DeduceRequest.token)
  return _internal_mutable_token();
}
inline const std::string& DeduceRequest::_internal_token() const {
  return token_.GetNoArena();
}
inline void DeduceRequest::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeduceRequest::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeduceRequest.token)
}
inline void DeduceRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeduceRequest.token)
}
inline void DeduceRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeduceRequest.token)
}
inline std::string* DeduceRequest::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeduceRequest::release_token() {
  // @@protoc_insertion_point(field_release:deduction.DeduceRequest.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeduceRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeduceRequest.token)
}

// string arrangementType = 2;
inline void DeduceRequest::clear_arrangementtype() {
  arrangementtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeduceRequest::arrangementtype() const {
  // @@protoc_insertion_point(field_get:deduction.DeduceRequest.arrangementType)
  return _internal_arrangementtype();
}
inline void DeduceRequest::set_arrangementtype(const std::string& value) {
  _internal_set_arrangementtype(value);
  // @@protoc_insertion_point(field_set:deduction.DeduceRequest.arrangementType)
}
inline std::string* DeduceRequest::mutable_arrangementtype() {
  // @@protoc_insertion_point(field_mutable:deduction.DeduceRequest.arrangementType)
  return _internal_mutable_arrangementtype();
}
inline const std::string& DeduceRequest::_internal_arrangementtype() const {
  return arrangementtype_.GetNoArena();
}
inline void DeduceRequest::_internal_set_arrangementtype(const std::string& value) {
  
  arrangementtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeduceRequest::set_arrangementtype(std::string&& value) {
  
  arrangementtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeduceRequest.arrangementType)
}
inline void DeduceRequest::set_arrangementtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arrangementtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeduceRequest.arrangementType)
}
inline void DeduceRequest::set_arrangementtype(const char* value, size_t size) {
  
  arrangementtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeduceRequest.arrangementType)
}
inline std::string* DeduceRequest::_internal_mutable_arrangementtype() {
  
  return arrangementtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeduceRequest::release_arrangementtype() {
  // @@protoc_insertion_point(field_release:deduction.DeduceRequest.arrangementType)
  
  return arrangementtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeduceRequest::set_allocated_arrangementtype(std::string* arrangementtype) {
  if (arrangementtype != nullptr) {
    
  } else {
    
  }
  arrangementtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arrangementtype);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeduceRequest.arrangementType)
}

// string productCode = 3;
inline void DeduceRequest::clear_productcode() {
  productcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeduceRequest::productcode() const {
  // @@protoc_insertion_point(field_get:deduction.DeduceRequest.productCode)
  return _internal_productcode();
}
inline void DeduceRequest::set_productcode(const std::string& value) {
  _internal_set_productcode(value);
  // @@protoc_insertion_point(field_set:deduction.DeduceRequest.productCode)
}
inline std::string* DeduceRequest::mutable_productcode() {
  // @@protoc_insertion_point(field_mutable:deduction.DeduceRequest.productCode)
  return _internal_mutable_productcode();
}
inline const std::string& DeduceRequest::_internal_productcode() const {
  return productcode_.GetNoArena();
}
inline void DeduceRequest::_internal_set_productcode(const std::string& value) {
  
  productcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeduceRequest::set_productcode(std::string&& value) {
  
  productcode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeduceRequest.productCode)
}
inline void DeduceRequest::set_productcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeduceRequest.productCode)
}
inline void DeduceRequest::set_productcode(const char* value, size_t size) {
  
  productcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeduceRequest.productCode)
}
inline std::string* DeduceRequest::_internal_mutable_productcode() {
  
  return productcode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeduceRequest::release_productcode() {
  // @@protoc_insertion_point(field_release:deduction.DeduceRequest.productCode)
  
  return productcode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeduceRequest::set_allocated_productcode(std::string* productcode) {
  if (productcode != nullptr) {
    
  } else {
    
  }
  productcode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productcode);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeduceRequest.productCode)
}

// string userId = 4;
inline void DeduceRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeduceRequest::userid() const {
  // @@protoc_insertion_point(field_get:deduction.DeduceRequest.userId)
  return _internal_userid();
}
inline void DeduceRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:deduction.DeduceRequest.userId)
}
inline std::string* DeduceRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:deduction.DeduceRequest.userId)
  return _internal_mutable_userid();
}
inline const std::string& DeduceRequest::_internal_userid() const {
  return userid_.GetNoArena();
}
inline void DeduceRequest::_internal_set_userid(const std::string& value) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeduceRequest::set_userid(std::string&& value) {
  
  userid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeduceRequest.userId)
}
inline void DeduceRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeduceRequest.userId)
}
inline void DeduceRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeduceRequest.userId)
}
inline std::string* DeduceRequest::_internal_mutable_userid() {
  
  return userid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeduceRequest::release_userid() {
  // @@protoc_insertion_point(field_release:deduction.DeduceRequest.userId)
  
  return userid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeduceRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeduceRequest.userId)
}

// -------------------------------------------------------------------

// DeduceResponse

// string status = 1;
inline void DeduceResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeduceResponse::status() const {
  // @@protoc_insertion_point(field_get:deduction.DeduceResponse.status)
  return _internal_status();
}
inline void DeduceResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:deduction.DeduceResponse.status)
}
inline std::string* DeduceResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:deduction.DeduceResponse.status)
  return _internal_mutable_status();
}
inline const std::string& DeduceResponse::_internal_status() const {
  return status_.GetNoArena();
}
inline void DeduceResponse::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeduceResponse::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeduceResponse.status)
}
inline void DeduceResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeduceResponse.status)
}
inline void DeduceResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeduceResponse.status)
}
inline std::string* DeduceResponse::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeduceResponse::release_status() {
  // @@protoc_insertion_point(field_release:deduction.DeduceResponse.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeduceResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeduceResponse.status)
}

// string code = 2;
inline void DeduceResponse::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeduceResponse::code() const {
  // @@protoc_insertion_point(field_get:deduction.DeduceResponse.code)
  return _internal_code();
}
inline void DeduceResponse::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:deduction.DeduceResponse.code)
}
inline std::string* DeduceResponse::mutable_code() {
  // @@protoc_insertion_point(field_mutable:deduction.DeduceResponse.code)
  return _internal_mutable_code();
}
inline const std::string& DeduceResponse::_internal_code() const {
  return code_.GetNoArena();
}
inline void DeduceResponse::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeduceResponse::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeduceResponse.code)
}
inline void DeduceResponse::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeduceResponse.code)
}
inline void DeduceResponse::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeduceResponse.code)
}
inline std::string* DeduceResponse::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeduceResponse::release_code() {
  // @@protoc_insertion_point(field_release:deduction.DeduceResponse.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeduceResponse::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeduceResponse.code)
}

// string desc = 3;
inline void DeduceResponse::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeduceResponse::desc() const {
  // @@protoc_insertion_point(field_get:deduction.DeduceResponse.desc)
  return _internal_desc();
}
inline void DeduceResponse::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:deduction.DeduceResponse.desc)
}
inline std::string* DeduceResponse::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:deduction.DeduceResponse.desc)
  return _internal_mutable_desc();
}
inline const std::string& DeduceResponse::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void DeduceResponse::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeduceResponse::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeduceResponse.desc)
}
inline void DeduceResponse::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeduceResponse.desc)
}
inline void DeduceResponse::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeduceResponse.desc)
}
inline std::string* DeduceResponse::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeduceResponse::release_desc() {
  // @@protoc_insertion_point(field_release:deduction.DeduceResponse.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeduceResponse::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeduceResponse.desc)
}

// -------------------------------------------------------------------

// DeductionListQueryRequest

// string token = 1;
inline void DeductionListQueryRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeductionListQueryRequest::token() const {
  // @@protoc_insertion_point(field_get:deduction.DeductionListQueryRequest.token)
  return _internal_token();
}
inline void DeductionListQueryRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:deduction.DeductionListQueryRequest.token)
}
inline std::string* DeductionListQueryRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:deduction.DeductionListQueryRequest.token)
  return _internal_mutable_token();
}
inline const std::string& DeductionListQueryRequest::_internal_token() const {
  return token_.GetNoArena();
}
inline void DeductionListQueryRequest::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeductionListQueryRequest::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeductionListQueryRequest.token)
}
inline void DeductionListQueryRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeductionListQueryRequest.token)
}
inline void DeductionListQueryRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeductionListQueryRequest.token)
}
inline std::string* DeductionListQueryRequest::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeductionListQueryRequest::release_token() {
  // @@protoc_insertion_point(field_release:deduction.DeductionListQueryRequest.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeductionListQueryRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeductionListQueryRequest.token)
}

// string arrangementType = 2;
inline void DeductionListQueryRequest::clear_arrangementtype() {
  arrangementtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeductionListQueryRequest::arrangementtype() const {
  // @@protoc_insertion_point(field_get:deduction.DeductionListQueryRequest.arrangementType)
  return _internal_arrangementtype();
}
inline void DeductionListQueryRequest::set_arrangementtype(const std::string& value) {
  _internal_set_arrangementtype(value);
  // @@protoc_insertion_point(field_set:deduction.DeductionListQueryRequest.arrangementType)
}
inline std::string* DeductionListQueryRequest::mutable_arrangementtype() {
  // @@protoc_insertion_point(field_mutable:deduction.DeductionListQueryRequest.arrangementType)
  return _internal_mutable_arrangementtype();
}
inline const std::string& DeductionListQueryRequest::_internal_arrangementtype() const {
  return arrangementtype_.GetNoArena();
}
inline void DeductionListQueryRequest::_internal_set_arrangementtype(const std::string& value) {
  
  arrangementtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeductionListQueryRequest::set_arrangementtype(std::string&& value) {
  
  arrangementtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeductionListQueryRequest.arrangementType)
}
inline void DeductionListQueryRequest::set_arrangementtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arrangementtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeductionListQueryRequest.arrangementType)
}
inline void DeductionListQueryRequest::set_arrangementtype(const char* value, size_t size) {
  
  arrangementtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeductionListQueryRequest.arrangementType)
}
inline std::string* DeductionListQueryRequest::_internal_mutable_arrangementtype() {
  
  return arrangementtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeductionListQueryRequest::release_arrangementtype() {
  // @@protoc_insertion_point(field_release:deduction.DeductionListQueryRequest.arrangementType)
  
  return arrangementtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeductionListQueryRequest::set_allocated_arrangementtype(std::string* arrangementtype) {
  if (arrangementtype != nullptr) {
    
  } else {
    
  }
  arrangementtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arrangementtype);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeductionListQueryRequest.arrangementType)
}

// string userId = 3;
inline void DeductionListQueryRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeductionListQueryRequest::userid() const {
  // @@protoc_insertion_point(field_get:deduction.DeductionListQueryRequest.userId)
  return _internal_userid();
}
inline void DeductionListQueryRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:deduction.DeductionListQueryRequest.userId)
}
inline std::string* DeductionListQueryRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:deduction.DeductionListQueryRequest.userId)
  return _internal_mutable_userid();
}
inline const std::string& DeductionListQueryRequest::_internal_userid() const {
  return userid_.GetNoArena();
}
inline void DeductionListQueryRequest::_internal_set_userid(const std::string& value) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeductionListQueryRequest::set_userid(std::string&& value) {
  
  userid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeductionListQueryRequest.userId)
}
inline void DeductionListQueryRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeductionListQueryRequest.userId)
}
inline void DeductionListQueryRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeductionListQueryRequest.userId)
}
inline std::string* DeductionListQueryRequest::_internal_mutable_userid() {
  
  return userid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeductionListQueryRequest::release_userid() {
  // @@protoc_insertion_point(field_release:deduction.DeductionListQueryRequest.userId)
  
  return userid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeductionListQueryRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeductionListQueryRequest.userId)
}

// string pageIndex = 4;
inline void DeductionListQueryRequest::clear_pageindex() {
  pageindex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeductionListQueryRequest::pageindex() const {
  // @@protoc_insertion_point(field_get:deduction.DeductionListQueryRequest.pageIndex)
  return _internal_pageindex();
}
inline void DeductionListQueryRequest::set_pageindex(const std::string& value) {
  _internal_set_pageindex(value);
  // @@protoc_insertion_point(field_set:deduction.DeductionListQueryRequest.pageIndex)
}
inline std::string* DeductionListQueryRequest::mutable_pageindex() {
  // @@protoc_insertion_point(field_mutable:deduction.DeductionListQueryRequest.pageIndex)
  return _internal_mutable_pageindex();
}
inline const std::string& DeductionListQueryRequest::_internal_pageindex() const {
  return pageindex_.GetNoArena();
}
inline void DeductionListQueryRequest::_internal_set_pageindex(const std::string& value) {
  
  pageindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeductionListQueryRequest::set_pageindex(std::string&& value) {
  
  pageindex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeductionListQueryRequest.pageIndex)
}
inline void DeductionListQueryRequest::set_pageindex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pageindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeductionListQueryRequest.pageIndex)
}
inline void DeductionListQueryRequest::set_pageindex(const char* value, size_t size) {
  
  pageindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeductionListQueryRequest.pageIndex)
}
inline std::string* DeductionListQueryRequest::_internal_mutable_pageindex() {
  
  return pageindex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeductionListQueryRequest::release_pageindex() {
  // @@protoc_insertion_point(field_release:deduction.DeductionListQueryRequest.pageIndex)
  
  return pageindex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeductionListQueryRequest::set_allocated_pageindex(std::string* pageindex) {
  if (pageindex != nullptr) {
    
  } else {
    
  }
  pageindex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pageindex);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeductionListQueryRequest.pageIndex)
}

// string pageSize = 5;
inline void DeductionListQueryRequest::clear_pagesize() {
  pagesize_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeductionListQueryRequest::pagesize() const {
  // @@protoc_insertion_point(field_get:deduction.DeductionListQueryRequest.pageSize)
  return _internal_pagesize();
}
inline void DeductionListQueryRequest::set_pagesize(const std::string& value) {
  _internal_set_pagesize(value);
  // @@protoc_insertion_point(field_set:deduction.DeductionListQueryRequest.pageSize)
}
inline std::string* DeductionListQueryRequest::mutable_pagesize() {
  // @@protoc_insertion_point(field_mutable:deduction.DeductionListQueryRequest.pageSize)
  return _internal_mutable_pagesize();
}
inline const std::string& DeductionListQueryRequest::_internal_pagesize() const {
  return pagesize_.GetNoArena();
}
inline void DeductionListQueryRequest::_internal_set_pagesize(const std::string& value) {
  
  pagesize_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeductionListQueryRequest::set_pagesize(std::string&& value) {
  
  pagesize_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeductionListQueryRequest.pageSize)
}
inline void DeductionListQueryRequest::set_pagesize(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pagesize_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeductionListQueryRequest.pageSize)
}
inline void DeductionListQueryRequest::set_pagesize(const char* value, size_t size) {
  
  pagesize_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeductionListQueryRequest.pageSize)
}
inline std::string* DeductionListQueryRequest::_internal_mutable_pagesize() {
  
  return pagesize_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeductionListQueryRequest::release_pagesize() {
  // @@protoc_insertion_point(field_release:deduction.DeductionListQueryRequest.pageSize)
  
  return pagesize_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeductionListQueryRequest::set_allocated_pagesize(std::string* pagesize) {
  if (pagesize != nullptr) {
    
  } else {
    
  }
  pagesize_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pagesize);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeductionListQueryRequest.pageSize)
}

// -------------------------------------------------------------------

// SimpliedProductInfo

// string productCode = 1;
inline void SimpliedProductInfo::clear_productcode() {
  productcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SimpliedProductInfo::productcode() const {
  // @@protoc_insertion_point(field_get:deduction.SimpliedProductInfo.productCode)
  return _internal_productcode();
}
inline void SimpliedProductInfo::set_productcode(const std::string& value) {
  _internal_set_productcode(value);
  // @@protoc_insertion_point(field_set:deduction.SimpliedProductInfo.productCode)
}
inline std::string* SimpliedProductInfo::mutable_productcode() {
  // @@protoc_insertion_point(field_mutable:deduction.SimpliedProductInfo.productCode)
  return _internal_mutable_productcode();
}
inline const std::string& SimpliedProductInfo::_internal_productcode() const {
  return productcode_.GetNoArena();
}
inline void SimpliedProductInfo::_internal_set_productcode(const std::string& value) {
  
  productcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SimpliedProductInfo::set_productcode(std::string&& value) {
  
  productcode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.SimpliedProductInfo.productCode)
}
inline void SimpliedProductInfo::set_productcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.SimpliedProductInfo.productCode)
}
inline void SimpliedProductInfo::set_productcode(const char* value, size_t size) {
  
  productcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.SimpliedProductInfo.productCode)
}
inline std::string* SimpliedProductInfo::_internal_mutable_productcode() {
  
  return productcode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SimpliedProductInfo::release_productcode() {
  // @@protoc_insertion_point(field_release:deduction.SimpliedProductInfo.productCode)
  
  return productcode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SimpliedProductInfo::set_allocated_productcode(std::string* productcode) {
  if (productcode != nullptr) {
    
  } else {
    
  }
  productcode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productcode);
  // @@protoc_insertion_point(field_set_allocated:deduction.SimpliedProductInfo.productCode)
}

// string productName = 2;
inline void SimpliedProductInfo::clear_productname() {
  productname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SimpliedProductInfo::productname() const {
  // @@protoc_insertion_point(field_get:deduction.SimpliedProductInfo.productName)
  return _internal_productname();
}
inline void SimpliedProductInfo::set_productname(const std::string& value) {
  _internal_set_productname(value);
  // @@protoc_insertion_point(field_set:deduction.SimpliedProductInfo.productName)
}
inline std::string* SimpliedProductInfo::mutable_productname() {
  // @@protoc_insertion_point(field_mutable:deduction.SimpliedProductInfo.productName)
  return _internal_mutable_productname();
}
inline const std::string& SimpliedProductInfo::_internal_productname() const {
  return productname_.GetNoArena();
}
inline void SimpliedProductInfo::_internal_set_productname(const std::string& value) {
  
  productname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SimpliedProductInfo::set_productname(std::string&& value) {
  
  productname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.SimpliedProductInfo.productName)
}
inline void SimpliedProductInfo::set_productname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.SimpliedProductInfo.productName)
}
inline void SimpliedProductInfo::set_productname(const char* value, size_t size) {
  
  productname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.SimpliedProductInfo.productName)
}
inline std::string* SimpliedProductInfo::_internal_mutable_productname() {
  
  return productname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SimpliedProductInfo::release_productname() {
  // @@protoc_insertion_point(field_release:deduction.SimpliedProductInfo.productName)
  
  return productname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SimpliedProductInfo::set_allocated_productname(std::string* productname) {
  if (productname != nullptr) {
    
  } else {
    
  }
  productname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productname);
  // @@protoc_insertion_point(field_set_allocated:deduction.SimpliedProductInfo.productName)
}

// string proudctOrgName = 3;
inline void SimpliedProductInfo::clear_proudctorgname() {
  proudctorgname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SimpliedProductInfo::proudctorgname() const {
  // @@protoc_insertion_point(field_get:deduction.SimpliedProductInfo.proudctOrgName)
  return _internal_proudctorgname();
}
inline void SimpliedProductInfo::set_proudctorgname(const std::string& value) {
  _internal_set_proudctorgname(value);
  // @@protoc_insertion_point(field_set:deduction.SimpliedProductInfo.proudctOrgName)
}
inline std::string* SimpliedProductInfo::mutable_proudctorgname() {
  // @@protoc_insertion_point(field_mutable:deduction.SimpliedProductInfo.proudctOrgName)
  return _internal_mutable_proudctorgname();
}
inline const std::string& SimpliedProductInfo::_internal_proudctorgname() const {
  return proudctorgname_.GetNoArena();
}
inline void SimpliedProductInfo::_internal_set_proudctorgname(const std::string& value) {
  
  proudctorgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SimpliedProductInfo::set_proudctorgname(std::string&& value) {
  
  proudctorgname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.SimpliedProductInfo.proudctOrgName)
}
inline void SimpliedProductInfo::set_proudctorgname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proudctorgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.SimpliedProductInfo.proudctOrgName)
}
inline void SimpliedProductInfo::set_proudctorgname(const char* value, size_t size) {
  
  proudctorgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.SimpliedProductInfo.proudctOrgName)
}
inline std::string* SimpliedProductInfo::_internal_mutable_proudctorgname() {
  
  return proudctorgname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SimpliedProductInfo::release_proudctorgname() {
  // @@protoc_insertion_point(field_release:deduction.SimpliedProductInfo.proudctOrgName)
  
  return proudctorgname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SimpliedProductInfo::set_allocated_proudctorgname(std::string* proudctorgname) {
  if (proudctorgname != nullptr) {
    
  } else {
    
  }
  proudctorgname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proudctorgname);
  // @@protoc_insertion_point(field_set_allocated:deduction.SimpliedProductInfo.proudctOrgName)
}

// -------------------------------------------------------------------

// DeductionListQueryResponse

// string status = 1;
inline void DeductionListQueryResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeductionListQueryResponse::status() const {
  // @@protoc_insertion_point(field_get:deduction.DeductionListQueryResponse.status)
  return _internal_status();
}
inline void DeductionListQueryResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:deduction.DeductionListQueryResponse.status)
}
inline std::string* DeductionListQueryResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:deduction.DeductionListQueryResponse.status)
  return _internal_mutable_status();
}
inline const std::string& DeductionListQueryResponse::_internal_status() const {
  return status_.GetNoArena();
}
inline void DeductionListQueryResponse::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeductionListQueryResponse::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeductionListQueryResponse.status)
}
inline void DeductionListQueryResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeductionListQueryResponse.status)
}
inline void DeductionListQueryResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeductionListQueryResponse.status)
}
inline std::string* DeductionListQueryResponse::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeductionListQueryResponse::release_status() {
  // @@protoc_insertion_point(field_release:deduction.DeductionListQueryResponse.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeductionListQueryResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeductionListQueryResponse.status)
}

// string code = 2;
inline void DeductionListQueryResponse::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeductionListQueryResponse::code() const {
  // @@protoc_insertion_point(field_get:deduction.DeductionListQueryResponse.code)
  return _internal_code();
}
inline void DeductionListQueryResponse::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:deduction.DeductionListQueryResponse.code)
}
inline std::string* DeductionListQueryResponse::mutable_code() {
  // @@protoc_insertion_point(field_mutable:deduction.DeductionListQueryResponse.code)
  return _internal_mutable_code();
}
inline const std::string& DeductionListQueryResponse::_internal_code() const {
  return code_.GetNoArena();
}
inline void DeductionListQueryResponse::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeductionListQueryResponse::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeductionListQueryResponse.code)
}
inline void DeductionListQueryResponse::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeductionListQueryResponse.code)
}
inline void DeductionListQueryResponse::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeductionListQueryResponse.code)
}
inline std::string* DeductionListQueryResponse::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeductionListQueryResponse::release_code() {
  // @@protoc_insertion_point(field_release:deduction.DeductionListQueryResponse.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeductionListQueryResponse::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeductionListQueryResponse.code)
}

// string desc = 3;
inline void DeductionListQueryResponse::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeductionListQueryResponse::desc() const {
  // @@protoc_insertion_point(field_get:deduction.DeductionListQueryResponse.desc)
  return _internal_desc();
}
inline void DeductionListQueryResponse::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:deduction.DeductionListQueryResponse.desc)
}
inline std::string* DeductionListQueryResponse::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:deduction.DeductionListQueryResponse.desc)
  return _internal_mutable_desc();
}
inline const std::string& DeductionListQueryResponse::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void DeductionListQueryResponse::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeductionListQueryResponse::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deduction.DeductionListQueryResponse.desc)
}
inline void DeductionListQueryResponse::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deduction.DeductionListQueryResponse.desc)
}
inline void DeductionListQueryResponse::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deduction.DeductionListQueryResponse.desc)
}
inline std::string* DeductionListQueryResponse::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeductionListQueryResponse::release_desc() {
  // @@protoc_insertion_point(field_release:deduction.DeductionListQueryResponse.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeductionListQueryResponse::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:deduction.DeductionListQueryResponse.desc)
}

// repeated .deduction.SimpliedProductInfo simpliedProductInfo = 4;
inline int DeductionListQueryResponse::_internal_simpliedproductinfo_size() const {
  return simpliedproductinfo_.size();
}
inline int DeductionListQueryResponse::simpliedproductinfo_size() const {
  return _internal_simpliedproductinfo_size();
}
inline void DeductionListQueryResponse::clear_simpliedproductinfo() {
  simpliedproductinfo_.Clear();
}
inline ::deduction::SimpliedProductInfo* DeductionListQueryResponse::mutable_simpliedproductinfo(int index) {
  // @@protoc_insertion_point(field_mutable:deduction.DeductionListQueryResponse.simpliedProductInfo)
  return simpliedproductinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deduction::SimpliedProductInfo >*
DeductionListQueryResponse::mutable_simpliedproductinfo() {
  // @@protoc_insertion_point(field_mutable_list:deduction.DeductionListQueryResponse.simpliedProductInfo)
  return &simpliedproductinfo_;
}
inline const ::deduction::SimpliedProductInfo& DeductionListQueryResponse::_internal_simpliedproductinfo(int index) const {
  return simpliedproductinfo_.Get(index);
}
inline const ::deduction::SimpliedProductInfo& DeductionListQueryResponse::simpliedproductinfo(int index) const {
  // @@protoc_insertion_point(field_get:deduction.DeductionListQueryResponse.simpliedProductInfo)
  return _internal_simpliedproductinfo(index);
}
inline ::deduction::SimpliedProductInfo* DeductionListQueryResponse::_internal_add_simpliedproductinfo() {
  return simpliedproductinfo_.Add();
}
inline ::deduction::SimpliedProductInfo* DeductionListQueryResponse::add_simpliedproductinfo() {
  // @@protoc_insertion_point(field_add:deduction.DeductionListQueryResponse.simpliedProductInfo)
  return _internal_add_simpliedproductinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::deduction::SimpliedProductInfo >&
DeductionListQueryResponse::simpliedproductinfo() const {
  // @@protoc_insertion_point(field_list:deduction.DeductionListQueryResponse.simpliedProductInfo)
  return simpliedproductinfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace deduction

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::deduction::StatusEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::deduction::StatusEnum>() {
  return ::deduction::StatusEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_deduction_2eproto
