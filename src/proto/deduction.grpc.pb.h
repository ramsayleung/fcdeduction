// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deduction.proto
#ifndef GRPC_deduction_2eproto__INCLUDED
#define GRPC_deduction_2eproto__INCLUDED

#include "deduction.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace deduction {

class DeductionFacade final {
 public:
  static constexpr char const* service_full_name() {
    return "deduction.DeductionFacade";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 开通扣费服务
    virtual ::grpc::Status CreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::deduction::DeduceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>> AsyncCreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>>(AsyncCreateDeductionServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>> PrepareAsyncCreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>>(PrepareAsyncCreateDeductionServiceRaw(context, request, cq));
    }
    // 关闭扣费信息
    virtual ::grpc::Status CloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::deduction::DeduceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>> AsyncCloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>>(AsyncCloseDeductionServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>> PrepareAsyncCloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>>(PrepareAsyncCloseDeductionServiceRaw(context, request, cq));
    }
    // 查询扣费服务列表
    virtual ::grpc::Status QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest& request, ::deduction::DeductionListQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeductionListQueryResponse>> AsyncQueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeductionListQueryResponse>>(AsyncQueryDeductionListByUserIdAndArTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeductionListQueryResponse>> PrepareAsyncQueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeductionListQueryResponse>>(PrepareAsyncQueryDeductionListByUserIdAndArTypeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 开通扣费服务
      virtual void CreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 关闭扣费信息
      virtual void CloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 查询扣费服务列表
      virtual void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest* request, ::deduction::DeductionListQueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeductionListQueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest* request, ::deduction::DeductionListQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest* request, ::deduction::DeductionListQueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeductionListQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeductionListQueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>* AsyncCreateDeductionServiceRaw(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>* PrepareAsyncCreateDeductionServiceRaw(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>* AsyncCloseDeductionServiceRaw(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeduceResponse>* PrepareAsyncCloseDeductionServiceRaw(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeductionListQueryResponse>* AsyncQueryDeductionListByUserIdAndArTypeRaw(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::deduction::DeductionListQueryResponse>* PrepareAsyncQueryDeductionListByUserIdAndArTypeRaw(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::deduction::DeduceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>> AsyncCreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>>(AsyncCreateDeductionServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>> PrepareAsyncCreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>>(PrepareAsyncCreateDeductionServiceRaw(context, request, cq));
    }
    ::grpc::Status CloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::deduction::DeduceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>> AsyncCloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>>(AsyncCloseDeductionServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>> PrepareAsyncCloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>>(PrepareAsyncCloseDeductionServiceRaw(context, request, cq));
    }
    ::grpc::Status QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest& request, ::deduction::DeductionListQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeductionListQueryResponse>> AsyncQueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeductionListQueryResponse>>(AsyncQueryDeductionListByUserIdAndArTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeductionListQueryResponse>> PrepareAsyncQueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::deduction::DeductionListQueryResponse>>(PrepareAsyncQueryDeductionListByUserIdAndArTypeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseDeductionService(::grpc::ClientContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseDeductionService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeduceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest* request, ::deduction::DeductionListQueryResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeductionListQueryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest* request, ::deduction::DeductionListQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest* request, ::deduction::DeductionListQueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeductionListQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryDeductionListByUserIdAndArType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::deduction::DeductionListQueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>* AsyncCreateDeductionServiceRaw(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>* PrepareAsyncCreateDeductionServiceRaw(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>* AsyncCloseDeductionServiceRaw(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::deduction::DeduceResponse>* PrepareAsyncCloseDeductionServiceRaw(::grpc::ClientContext* context, const ::deduction::DeduceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::deduction::DeductionListQueryResponse>* AsyncQueryDeductionListByUserIdAndArTypeRaw(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::deduction::DeductionListQueryResponse>* PrepareAsyncQueryDeductionListByUserIdAndArTypeRaw(::grpc::ClientContext* context, const ::deduction::DeductionListQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDeductionService_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseDeductionService_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryDeductionListByUserIdAndArType_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 开通扣费服务
    virtual ::grpc::Status CreateDeductionService(::grpc::ServerContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response);
    // 关闭扣费信息
    virtual ::grpc::Status CloseDeductionService(::grpc::ServerContext* context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response);
    // 查询扣费服务列表
    virtual ::grpc::Status QueryDeductionListByUserIdAndArType(::grpc::ServerContext* context, const ::deduction::DeductionListQueryRequest* request, ::deduction::DeductionListQueryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDeductionService() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDeductionService(::grpc::ServerContext* context, ::deduction::DeduceRequest* request, ::grpc::ServerAsyncResponseWriter< ::deduction::DeduceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseDeductionService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CloseDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDeductionService(::grpc::ServerContext* context, ::deduction::DeduceRequest* request, ::grpc::ServerAsyncResponseWriter< ::deduction::DeduceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryDeductionListByUserIdAndArType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryDeductionListByUserIdAndArType() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_QueryDeductionListByUserIdAndArType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDeductionListByUserIdAndArType(::grpc::ServerContext* /*context*/, const ::deduction::DeductionListQueryRequest* /*request*/, ::deduction::DeductionListQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryDeductionListByUserIdAndArType(::grpc::ServerContext* context, ::deduction::DeductionListQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::deduction::DeductionListQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateDeductionService<WithAsyncMethod_CloseDeductionService<WithAsyncMethod_QueryDeductionListByUserIdAndArType<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateDeductionService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::deduction::DeduceRequest, ::deduction::DeduceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response) { return this->CreateDeductionService(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDeductionService(
        ::grpc::experimental::MessageAllocator< ::deduction::DeduceRequest, ::deduction::DeduceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::deduction::DeduceRequest, ::deduction::DeduceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDeductionService(
      ::grpc::CallbackServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDeductionService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CloseDeductionService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::deduction::DeduceRequest, ::deduction::DeduceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::deduction::DeduceRequest* request, ::deduction::DeduceResponse* response) { return this->CloseDeductionService(context, request, response); }));}
    void SetMessageAllocatorFor_CloseDeductionService(
        ::grpc::experimental::MessageAllocator< ::deduction::DeduceRequest, ::deduction::DeduceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::deduction::DeduceRequest, ::deduction::DeduceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseDeductionService(
      ::grpc::CallbackServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseDeductionService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryDeductionListByUserIdAndArType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryDeductionListByUserIdAndArType() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::deduction::DeductionListQueryRequest, ::deduction::DeductionListQueryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::deduction::DeductionListQueryRequest* request, ::deduction::DeductionListQueryResponse* response) { return this->QueryDeductionListByUserIdAndArType(context, request, response); }));}
    void SetMessageAllocatorFor_QueryDeductionListByUserIdAndArType(
        ::grpc::experimental::MessageAllocator< ::deduction::DeductionListQueryRequest, ::deduction::DeductionListQueryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::deduction::DeductionListQueryRequest, ::deduction::DeductionListQueryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryDeductionListByUserIdAndArType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDeductionListByUserIdAndArType(::grpc::ServerContext* /*context*/, const ::deduction::DeductionListQueryRequest* /*request*/, ::deduction::DeductionListQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryDeductionListByUserIdAndArType(
      ::grpc::CallbackServerContext* /*context*/, const ::deduction::DeductionListQueryRequest* /*request*/, ::deduction::DeductionListQueryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryDeductionListByUserIdAndArType(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::deduction::DeductionListQueryRequest* /*request*/, ::deduction::DeductionListQueryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateDeductionService<ExperimentalWithCallbackMethod_CloseDeductionService<ExperimentalWithCallbackMethod_QueryDeductionListByUserIdAndArType<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateDeductionService<ExperimentalWithCallbackMethod_CloseDeductionService<ExperimentalWithCallbackMethod_QueryDeductionListByUserIdAndArType<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDeductionService() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseDeductionService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CloseDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryDeductionListByUserIdAndArType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryDeductionListByUserIdAndArType() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_QueryDeductionListByUserIdAndArType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDeductionListByUserIdAndArType(::grpc::ServerContext* /*context*/, const ::deduction::DeductionListQueryRequest* /*request*/, ::deduction::DeductionListQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDeductionService() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDeductionService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseDeductionService() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CloseDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDeductionService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryDeductionListByUserIdAndArType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryDeductionListByUserIdAndArType() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_QueryDeductionListByUserIdAndArType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDeductionListByUserIdAndArType(::grpc::ServerContext* /*context*/, const ::deduction::DeductionListQueryRequest* /*request*/, ::deduction::DeductionListQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryDeductionListByUserIdAndArType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateDeductionService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDeductionService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDeductionService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDeductionService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseDeductionService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseDeductionService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseDeductionService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseDeductionService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryDeductionListByUserIdAndArType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryDeductionListByUserIdAndArType() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryDeductionListByUserIdAndArType(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryDeductionListByUserIdAndArType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDeductionListByUserIdAndArType(::grpc::ServerContext* /*context*/, const ::deduction::DeductionListQueryRequest* /*request*/, ::deduction::DeductionListQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryDeductionListByUserIdAndArType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryDeductionListByUserIdAndArType(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDeductionService() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::deduction::DeduceRequest, ::deduction::DeduceResponse>(std::bind(&WithStreamedUnaryMethod_CreateDeductionService<BaseClass>::StreamedCreateDeductionService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDeductionService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::deduction::DeduceRequest,::deduction::DeduceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseDeductionService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseDeductionService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::deduction::DeduceRequest, ::deduction::DeduceResponse>(std::bind(&WithStreamedUnaryMethod_CloseDeductionService<BaseClass>::StreamedCloseDeductionService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CloseDeductionService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseDeductionService(::grpc::ServerContext* /*context*/, const ::deduction::DeduceRequest* /*request*/, ::deduction::DeduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseDeductionService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::deduction::DeduceRequest,::deduction::DeduceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryDeductionListByUserIdAndArType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryDeductionListByUserIdAndArType() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::deduction::DeductionListQueryRequest, ::deduction::DeductionListQueryResponse>(std::bind(&WithStreamedUnaryMethod_QueryDeductionListByUserIdAndArType<BaseClass>::StreamedQueryDeductionListByUserIdAndArType, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QueryDeductionListByUserIdAndArType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryDeductionListByUserIdAndArType(::grpc::ServerContext* /*context*/, const ::deduction::DeductionListQueryRequest* /*request*/, ::deduction::DeductionListQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryDeductionListByUserIdAndArType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::deduction::DeductionListQueryRequest,::deduction::DeductionListQueryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateDeductionService<WithStreamedUnaryMethod_CloseDeductionService<WithStreamedUnaryMethod_QueryDeductionListByUserIdAndArType<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateDeductionService<WithStreamedUnaryMethod_CloseDeductionService<WithStreamedUnaryMethod_QueryDeductionListByUserIdAndArType<Service > > > StreamedService;
};

}  // namespace deduction


#endif  // GRPC_deduction_2eproto__INCLUDED
