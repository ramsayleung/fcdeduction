// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
namespace user {
class LoginSessionValidateRequest;
class LoginSessionValidateRequestDefaultTypeInternal;
extern LoginSessionValidateRequestDefaultTypeInternal _LoginSessionValidateRequest_default_instance_;
class LoginSessionValidateResponse;
class LoginSessionValidateResponseDefaultTypeInternal;
extern LoginSessionValidateResponseDefaultTypeInternal _LoginSessionValidateResponse_default_instance_;
class UserLoginRequest;
class UserLoginRequestDefaultTypeInternal;
extern UserLoginRequestDefaultTypeInternal _UserLoginRequest_default_instance_;
class UserLoginResponse;
class UserLoginResponseDefaultTypeInternal;
extern UserLoginResponseDefaultTypeInternal _UserLoginResponse_default_instance_;
}  // namespace user
PROTOBUF_NAMESPACE_OPEN
template<> ::user::LoginSessionValidateRequest* Arena::CreateMaybeMessage<::user::LoginSessionValidateRequest>(Arena*);
template<> ::user::LoginSessionValidateResponse* Arena::CreateMaybeMessage<::user::LoginSessionValidateResponse>(Arena*);
template<> ::user::UserLoginRequest* Arena::CreateMaybeMessage<::user::UserLoginRequest>(Arena*);
template<> ::user::UserLoginResponse* Arena::CreateMaybeMessage<::user::UserLoginResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace user {

// ===================================================================

class UserLoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.UserLoginRequest) */ {
 public:
  UserLoginRequest();
  virtual ~UserLoginRequest();

  UserLoginRequest(const UserLoginRequest& from);
  UserLoginRequest(UserLoginRequest&& from) noexcept
    : UserLoginRequest() {
    *this = ::std::move(from);
  }

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginRequest& operator=(UserLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginRequest* internal_default_instance() {
    return reinterpret_cast<const UserLoginRequest*>(
               &_UserLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserLoginRequest& a, UserLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginRequest* New() const final {
    return CreateMaybeMessage<UserLoginRequest>(nullptr);
  }

  UserLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginRequest& from);
  void MergeFrom(const UserLoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.UserLoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginKeyFieldNumber = 1,
    kLoginValueFieldNumber = 2,
  };
  // string loginKey = 1;
  void clear_loginkey();
  const std::string& loginkey() const;
  void set_loginkey(const std::string& value);
  void set_loginkey(std::string&& value);
  void set_loginkey(const char* value);
  void set_loginkey(const char* value, size_t size);
  std::string* mutable_loginkey();
  std::string* release_loginkey();
  void set_allocated_loginkey(std::string* loginkey);
  private:
  const std::string& _internal_loginkey() const;
  void _internal_set_loginkey(const std::string& value);
  std::string* _internal_mutable_loginkey();
  public:

  // string loginValue = 2;
  void clear_loginvalue();
  const std::string& loginvalue() const;
  void set_loginvalue(const std::string& value);
  void set_loginvalue(std::string&& value);
  void set_loginvalue(const char* value);
  void set_loginvalue(const char* value, size_t size);
  std::string* mutable_loginvalue();
  std::string* release_loginvalue();
  void set_allocated_loginvalue(std::string* loginvalue);
  private:
  const std::string& _internal_loginvalue() const;
  void _internal_set_loginvalue(const std::string& value);
  std::string* _internal_mutable_loginvalue();
  public:

  // @@protoc_insertion_point(class_scope:user.UserLoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UserLoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.UserLoginResponse) */ {
 public:
  UserLoginResponse();
  virtual ~UserLoginResponse();

  UserLoginResponse(const UserLoginResponse& from);
  UserLoginResponse(UserLoginResponse&& from) noexcept
    : UserLoginResponse() {
    *this = ::std::move(from);
  }

  inline UserLoginResponse& operator=(const UserLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginResponse& operator=(UserLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginResponse* internal_default_instance() {
    return reinterpret_cast<const UserLoginResponse*>(
               &_UserLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserLoginResponse& a, UserLoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginResponse* New() const final {
    return CreateMaybeMessage<UserLoginResponse>(nullptr);
  }

  UserLoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginResponse& from);
  void MergeFrom(const UserLoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.UserLoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCodeFieldNumber = 2,
    kDescFieldNumber = 3,
    kTokenFieldNumber = 4,
    kRefreshTokenFieldNumber = 5,
    kExpireTimeFieldNumber = 6,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string token = 4;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string refreshToken = 5;
  void clear_refreshtoken();
  const std::string& refreshtoken() const;
  void set_refreshtoken(const std::string& value);
  void set_refreshtoken(std::string&& value);
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  std::string* mutable_refreshtoken();
  std::string* release_refreshtoken();
  void set_allocated_refreshtoken(std::string* refreshtoken);
  private:
  const std::string& _internal_refreshtoken() const;
  void _internal_set_refreshtoken(const std::string& value);
  std::string* _internal_mutable_refreshtoken();
  public:

  // string expireTime = 6;
  void clear_expiretime();
  const std::string& expiretime() const;
  void set_expiretime(const std::string& value);
  void set_expiretime(std::string&& value);
  void set_expiretime(const char* value);
  void set_expiretime(const char* value, size_t size);
  std::string* mutable_expiretime();
  std::string* release_expiretime();
  void set_allocated_expiretime(std::string* expiretime);
  private:
  const std::string& _internal_expiretime() const;
  void _internal_set_expiretime(const std::string& value);
  std::string* _internal_mutable_expiretime();
  public:

  // @@protoc_insertion_point(class_scope:user.UserLoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refreshtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiretime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class LoginSessionValidateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.LoginSessionValidateRequest) */ {
 public:
  LoginSessionValidateRequest();
  virtual ~LoginSessionValidateRequest();

  LoginSessionValidateRequest(const LoginSessionValidateRequest& from);
  LoginSessionValidateRequest(LoginSessionValidateRequest&& from) noexcept
    : LoginSessionValidateRequest() {
    *this = ::std::move(from);
  }

  inline LoginSessionValidateRequest& operator=(const LoginSessionValidateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginSessionValidateRequest& operator=(LoginSessionValidateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginSessionValidateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginSessionValidateRequest* internal_default_instance() {
    return reinterpret_cast<const LoginSessionValidateRequest*>(
               &_LoginSessionValidateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginSessionValidateRequest& a, LoginSessionValidateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginSessionValidateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginSessionValidateRequest* New() const final {
    return CreateMaybeMessage<LoginSessionValidateRequest>(nullptr);
  }

  LoginSessionValidateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginSessionValidateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginSessionValidateRequest& from);
  void MergeFrom(const LoginSessionValidateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginSessionValidateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.LoginSessionValidateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:user.LoginSessionValidateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class LoginSessionValidateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.LoginSessionValidateResponse) */ {
 public:
  LoginSessionValidateResponse();
  virtual ~LoginSessionValidateResponse();

  LoginSessionValidateResponse(const LoginSessionValidateResponse& from);
  LoginSessionValidateResponse(LoginSessionValidateResponse&& from) noexcept
    : LoginSessionValidateResponse() {
    *this = ::std::move(from);
  }

  inline LoginSessionValidateResponse& operator=(const LoginSessionValidateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginSessionValidateResponse& operator=(LoginSessionValidateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginSessionValidateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginSessionValidateResponse* internal_default_instance() {
    return reinterpret_cast<const LoginSessionValidateResponse*>(
               &_LoginSessionValidateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginSessionValidateResponse& a, LoginSessionValidateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginSessionValidateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginSessionValidateResponse* New() const final {
    return CreateMaybeMessage<LoginSessionValidateResponse>(nullptr);
  }

  LoginSessionValidateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginSessionValidateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginSessionValidateResponse& from);
  void MergeFrom(const LoginSessionValidateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginSessionValidateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.LoginSessionValidateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCodeFieldNumber = 2,
    kDescFieldNumber = 3,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // @@protoc_insertion_point(class_scope:user.LoginSessionValidateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserLoginRequest

// string loginKey = 1;
inline void UserLoginRequest::clear_loginkey() {
  loginkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLoginRequest::loginkey() const {
  // @@protoc_insertion_point(field_get:user.UserLoginRequest.loginKey)
  return _internal_loginkey();
}
inline void UserLoginRequest::set_loginkey(const std::string& value) {
  _internal_set_loginkey(value);
  // @@protoc_insertion_point(field_set:user.UserLoginRequest.loginKey)
}
inline std::string* UserLoginRequest::mutable_loginkey() {
  // @@protoc_insertion_point(field_mutable:user.UserLoginRequest.loginKey)
  return _internal_mutable_loginkey();
}
inline const std::string& UserLoginRequest::_internal_loginkey() const {
  return loginkey_.GetNoArena();
}
inline void UserLoginRequest::_internal_set_loginkey(const std::string& value) {
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserLoginRequest::set_loginkey(std::string&& value) {
  
  loginkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.UserLoginRequest.loginKey)
}
inline void UserLoginRequest::set_loginkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.UserLoginRequest.loginKey)
}
inline void UserLoginRequest::set_loginkey(const char* value, size_t size) {
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.UserLoginRequest.loginKey)
}
inline std::string* UserLoginRequest::_internal_mutable_loginkey() {
  
  return loginkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLoginRequest::release_loginkey() {
  // @@protoc_insertion_point(field_release:user.UserLoginRequest.loginKey)
  
  return loginkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_loginkey(std::string* loginkey) {
  if (loginkey != nullptr) {
    
  } else {
    
  }
  loginkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginkey);
  // @@protoc_insertion_point(field_set_allocated:user.UserLoginRequest.loginKey)
}

// string loginValue = 2;
inline void UserLoginRequest::clear_loginvalue() {
  loginvalue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLoginRequest::loginvalue() const {
  // @@protoc_insertion_point(field_get:user.UserLoginRequest.loginValue)
  return _internal_loginvalue();
}
inline void UserLoginRequest::set_loginvalue(const std::string& value) {
  _internal_set_loginvalue(value);
  // @@protoc_insertion_point(field_set:user.UserLoginRequest.loginValue)
}
inline std::string* UserLoginRequest::mutable_loginvalue() {
  // @@protoc_insertion_point(field_mutable:user.UserLoginRequest.loginValue)
  return _internal_mutable_loginvalue();
}
inline const std::string& UserLoginRequest::_internal_loginvalue() const {
  return loginvalue_.GetNoArena();
}
inline void UserLoginRequest::_internal_set_loginvalue(const std::string& value) {
  
  loginvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserLoginRequest::set_loginvalue(std::string&& value) {
  
  loginvalue_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.UserLoginRequest.loginValue)
}
inline void UserLoginRequest::set_loginvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.UserLoginRequest.loginValue)
}
inline void UserLoginRequest::set_loginvalue(const char* value, size_t size) {
  
  loginvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.UserLoginRequest.loginValue)
}
inline std::string* UserLoginRequest::_internal_mutable_loginvalue() {
  
  return loginvalue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLoginRequest::release_loginvalue() {
  // @@protoc_insertion_point(field_release:user.UserLoginRequest.loginValue)
  
  return loginvalue_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_loginvalue(std::string* loginvalue) {
  if (loginvalue != nullptr) {
    
  } else {
    
  }
  loginvalue_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginvalue);
  // @@protoc_insertion_point(field_set_allocated:user.UserLoginRequest.loginValue)
}

// -------------------------------------------------------------------

// UserLoginResponse

// string status = 1;
inline void UserLoginResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLoginResponse::status() const {
  // @@protoc_insertion_point(field_get:user.UserLoginResponse.status)
  return _internal_status();
}
inline void UserLoginResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:user.UserLoginResponse.status)
}
inline std::string* UserLoginResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:user.UserLoginResponse.status)
  return _internal_mutable_status();
}
inline const std::string& UserLoginResponse::_internal_status() const {
  return status_.GetNoArena();
}
inline void UserLoginResponse::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserLoginResponse::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.UserLoginResponse.status)
}
inline void UserLoginResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.UserLoginResponse.status)
}
inline void UserLoginResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.UserLoginResponse.status)
}
inline std::string* UserLoginResponse::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLoginResponse::release_status() {
  // @@protoc_insertion_point(field_release:user.UserLoginResponse.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:user.UserLoginResponse.status)
}

// string code = 2;
inline void UserLoginResponse::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLoginResponse::code() const {
  // @@protoc_insertion_point(field_get:user.UserLoginResponse.code)
  return _internal_code();
}
inline void UserLoginResponse::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:user.UserLoginResponse.code)
}
inline std::string* UserLoginResponse::mutable_code() {
  // @@protoc_insertion_point(field_mutable:user.UserLoginResponse.code)
  return _internal_mutable_code();
}
inline const std::string& UserLoginResponse::_internal_code() const {
  return code_.GetNoArena();
}
inline void UserLoginResponse::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserLoginResponse::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.UserLoginResponse.code)
}
inline void UserLoginResponse::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.UserLoginResponse.code)
}
inline void UserLoginResponse::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.UserLoginResponse.code)
}
inline std::string* UserLoginResponse::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLoginResponse::release_code() {
  // @@protoc_insertion_point(field_release:user.UserLoginResponse.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginResponse::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:user.UserLoginResponse.code)
}

// string desc = 3;
inline void UserLoginResponse::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLoginResponse::desc() const {
  // @@protoc_insertion_point(field_get:user.UserLoginResponse.desc)
  return _internal_desc();
}
inline void UserLoginResponse::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:user.UserLoginResponse.desc)
}
inline std::string* UserLoginResponse::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:user.UserLoginResponse.desc)
  return _internal_mutable_desc();
}
inline const std::string& UserLoginResponse::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void UserLoginResponse::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserLoginResponse::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.UserLoginResponse.desc)
}
inline void UserLoginResponse::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.UserLoginResponse.desc)
}
inline void UserLoginResponse::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.UserLoginResponse.desc)
}
inline std::string* UserLoginResponse::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLoginResponse::release_desc() {
  // @@protoc_insertion_point(field_release:user.UserLoginResponse.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginResponse::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:user.UserLoginResponse.desc)
}

// string token = 4;
inline void UserLoginResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLoginResponse::token() const {
  // @@protoc_insertion_point(field_get:user.UserLoginResponse.token)
  return _internal_token();
}
inline void UserLoginResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:user.UserLoginResponse.token)
}
inline std::string* UserLoginResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:user.UserLoginResponse.token)
  return _internal_mutable_token();
}
inline const std::string& UserLoginResponse::_internal_token() const {
  return token_.GetNoArena();
}
inline void UserLoginResponse::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserLoginResponse::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.UserLoginResponse.token)
}
inline void UserLoginResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.UserLoginResponse.token)
}
inline void UserLoginResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.UserLoginResponse.token)
}
inline std::string* UserLoginResponse::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLoginResponse::release_token() {
  // @@protoc_insertion_point(field_release:user.UserLoginResponse.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:user.UserLoginResponse.token)
}

// string refreshToken = 5;
inline void UserLoginResponse::clear_refreshtoken() {
  refreshtoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLoginResponse::refreshtoken() const {
  // @@protoc_insertion_point(field_get:user.UserLoginResponse.refreshToken)
  return _internal_refreshtoken();
}
inline void UserLoginResponse::set_refreshtoken(const std::string& value) {
  _internal_set_refreshtoken(value);
  // @@protoc_insertion_point(field_set:user.UserLoginResponse.refreshToken)
}
inline std::string* UserLoginResponse::mutable_refreshtoken() {
  // @@protoc_insertion_point(field_mutable:user.UserLoginResponse.refreshToken)
  return _internal_mutable_refreshtoken();
}
inline const std::string& UserLoginResponse::_internal_refreshtoken() const {
  return refreshtoken_.GetNoArena();
}
inline void UserLoginResponse::_internal_set_refreshtoken(const std::string& value) {
  
  refreshtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserLoginResponse::set_refreshtoken(std::string&& value) {
  
  refreshtoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.UserLoginResponse.refreshToken)
}
inline void UserLoginResponse::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.UserLoginResponse.refreshToken)
}
inline void UserLoginResponse::set_refreshtoken(const char* value, size_t size) {
  
  refreshtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.UserLoginResponse.refreshToken)
}
inline std::string* UserLoginResponse::_internal_mutable_refreshtoken() {
  
  return refreshtoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLoginResponse::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:user.UserLoginResponse.refreshToken)
  
  return refreshtoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginResponse::set_allocated_refreshtoken(std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refreshtoken);
  // @@protoc_insertion_point(field_set_allocated:user.UserLoginResponse.refreshToken)
}

// string expireTime = 6;
inline void UserLoginResponse::clear_expiretime() {
  expiretime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLoginResponse::expiretime() const {
  // @@protoc_insertion_point(field_get:user.UserLoginResponse.expireTime)
  return _internal_expiretime();
}
inline void UserLoginResponse::set_expiretime(const std::string& value) {
  _internal_set_expiretime(value);
  // @@protoc_insertion_point(field_set:user.UserLoginResponse.expireTime)
}
inline std::string* UserLoginResponse::mutable_expiretime() {
  // @@protoc_insertion_point(field_mutable:user.UserLoginResponse.expireTime)
  return _internal_mutable_expiretime();
}
inline const std::string& UserLoginResponse::_internal_expiretime() const {
  return expiretime_.GetNoArena();
}
inline void UserLoginResponse::_internal_set_expiretime(const std::string& value) {
  
  expiretime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserLoginResponse::set_expiretime(std::string&& value) {
  
  expiretime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.UserLoginResponse.expireTime)
}
inline void UserLoginResponse::set_expiretime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expiretime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.UserLoginResponse.expireTime)
}
inline void UserLoginResponse::set_expiretime(const char* value, size_t size) {
  
  expiretime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.UserLoginResponse.expireTime)
}
inline std::string* UserLoginResponse::_internal_mutable_expiretime() {
  
  return expiretime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLoginResponse::release_expiretime() {
  // @@protoc_insertion_point(field_release:user.UserLoginResponse.expireTime)
  
  return expiretime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginResponse::set_allocated_expiretime(std::string* expiretime) {
  if (expiretime != nullptr) {
    
  } else {
    
  }
  expiretime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiretime);
  // @@protoc_insertion_point(field_set_allocated:user.UserLoginResponse.expireTime)
}

// -------------------------------------------------------------------

// LoginSessionValidateRequest

// string token = 1;
inline void LoginSessionValidateRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginSessionValidateRequest::token() const {
  // @@protoc_insertion_point(field_get:user.LoginSessionValidateRequest.token)
  return _internal_token();
}
inline void LoginSessionValidateRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:user.LoginSessionValidateRequest.token)
}
inline std::string* LoginSessionValidateRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:user.LoginSessionValidateRequest.token)
  return _internal_mutable_token();
}
inline const std::string& LoginSessionValidateRequest::_internal_token() const {
  return token_.GetNoArena();
}
inline void LoginSessionValidateRequest::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginSessionValidateRequest::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.LoginSessionValidateRequest.token)
}
inline void LoginSessionValidateRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.LoginSessionValidateRequest.token)
}
inline void LoginSessionValidateRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.LoginSessionValidateRequest.token)
}
inline std::string* LoginSessionValidateRequest::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginSessionValidateRequest::release_token() {
  // @@protoc_insertion_point(field_release:user.LoginSessionValidateRequest.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginSessionValidateRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:user.LoginSessionValidateRequest.token)
}

// -------------------------------------------------------------------

// LoginSessionValidateResponse

// string status = 1;
inline void LoginSessionValidateResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginSessionValidateResponse::status() const {
  // @@protoc_insertion_point(field_get:user.LoginSessionValidateResponse.status)
  return _internal_status();
}
inline void LoginSessionValidateResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:user.LoginSessionValidateResponse.status)
}
inline std::string* LoginSessionValidateResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:user.LoginSessionValidateResponse.status)
  return _internal_mutable_status();
}
inline const std::string& LoginSessionValidateResponse::_internal_status() const {
  return status_.GetNoArena();
}
inline void LoginSessionValidateResponse::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginSessionValidateResponse::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.LoginSessionValidateResponse.status)
}
inline void LoginSessionValidateResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.LoginSessionValidateResponse.status)
}
inline void LoginSessionValidateResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.LoginSessionValidateResponse.status)
}
inline std::string* LoginSessionValidateResponse::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginSessionValidateResponse::release_status() {
  // @@protoc_insertion_point(field_release:user.LoginSessionValidateResponse.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginSessionValidateResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:user.LoginSessionValidateResponse.status)
}

// string code = 2;
inline void LoginSessionValidateResponse::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginSessionValidateResponse::code() const {
  // @@protoc_insertion_point(field_get:user.LoginSessionValidateResponse.code)
  return _internal_code();
}
inline void LoginSessionValidateResponse::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:user.LoginSessionValidateResponse.code)
}
inline std::string* LoginSessionValidateResponse::mutable_code() {
  // @@protoc_insertion_point(field_mutable:user.LoginSessionValidateResponse.code)
  return _internal_mutable_code();
}
inline const std::string& LoginSessionValidateResponse::_internal_code() const {
  return code_.GetNoArena();
}
inline void LoginSessionValidateResponse::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginSessionValidateResponse::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.LoginSessionValidateResponse.code)
}
inline void LoginSessionValidateResponse::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.LoginSessionValidateResponse.code)
}
inline void LoginSessionValidateResponse::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.LoginSessionValidateResponse.code)
}
inline std::string* LoginSessionValidateResponse::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginSessionValidateResponse::release_code() {
  // @@protoc_insertion_point(field_release:user.LoginSessionValidateResponse.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginSessionValidateResponse::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:user.LoginSessionValidateResponse.code)
}

// string desc = 3;
inline void LoginSessionValidateResponse::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginSessionValidateResponse::desc() const {
  // @@protoc_insertion_point(field_get:user.LoginSessionValidateResponse.desc)
  return _internal_desc();
}
inline void LoginSessionValidateResponse::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:user.LoginSessionValidateResponse.desc)
}
inline std::string* LoginSessionValidateResponse::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:user.LoginSessionValidateResponse.desc)
  return _internal_mutable_desc();
}
inline const std::string& LoginSessionValidateResponse::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void LoginSessionValidateResponse::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginSessionValidateResponse::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.LoginSessionValidateResponse.desc)
}
inline void LoginSessionValidateResponse::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.LoginSessionValidateResponse.desc)
}
inline void LoginSessionValidateResponse::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.LoginSessionValidateResponse.desc)
}
inline std::string* LoginSessionValidateResponse::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginSessionValidateResponse::release_desc() {
  // @@protoc_insertion_point(field_release:user.LoginSessionValidateResponse.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginSessionValidateResponse::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:user.LoginSessionValidateResponse.desc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
