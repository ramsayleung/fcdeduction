// generated by /home/ramsay/code/cpp/sqlpp11/scripts/ddl2cpp /home/ramsay/code/cpp/fcdeduction/conf/de_ar.sql /home/ramsay/code/cpp/fcdeduction/src/arrangement model
#ifndef MODEL_ARRANGEMENT_H
#define MODEL_ARRANGEMENT_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace model
{
  namespace DeAr_
  {
    struct TntInstId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tnt_inst_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tntInstId;
            T& operator()() { return tntInstId; }
            const T& operator()() const { return tntInstId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct ArNumber
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ar_number";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T arNumber;
            T& operator()() { return arNumber; }
            const T& operator()() const { return arNumber; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct ArName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ar_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T arName;
            T& operator()() { return arName; }
            const T& operator()() const { return arName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct ArVersion
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ar_version";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T arVersion;
            T& operator()() { return arVersion; }
            const T& operator()() const { return arVersion; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Properties
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "properties";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T properties;
            T& operator()() { return properties; }
            const T& operator()() const { return properties; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Memo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "memo";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T memo;
            T& operator()() { return memo; }
            const T& operator()() const { return memo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct GmtCreate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gmt_create";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gmtCreate;
            T& operator()() { return gmtCreate; }
            const T& operator()() const { return gmtCreate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
    struct GmtModified
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gmt_modified";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gmtModified;
            T& operator()() { return gmtModified; }
            const T& operator()() const { return gmtModified; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
  } // namespace DeAr_

  struct DeAr: sqlpp::table_t<DeAr,
               DeAr_::TntInstId,
               DeAr_::ArNumber,
               DeAr_::ArName,
               DeAr_::ArVersion,
               DeAr_::Properties,
               DeAr_::Memo,
               DeAr_::GmtCreate,
               DeAr_::GmtModified>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "de_ar";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T deAr;
        T& operator()() { return deAr; }
        const T& operator()() const { return deAr; }
      };
    };
  };
} // namespace model
#endif
