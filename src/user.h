// generated by /home/ramsay/code/cpp/sqlpp11/scripts/ddl2cpp /home/ramsay/code/cpp/fcdeduction/conf/de_user.sql /home/ramsay/code/cpp/fcdeduction/src/user model
#ifndef MODEL_USER_H
#define MODEL_USER_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace model
{
  namespace DeUser_
  {
    struct TntInstId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tnt_inst_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tntInstId;
            T& operator()() { return tntInstId; }
            const T& operator()() const { return tntInstId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userId;
            T& operator()() { return userId; }
            const T& operator()() const { return userId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct UserName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userName;
            T& operator()() { return userName; }
            const T& operator()() const { return userName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct UserType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userType;
            T& operator()() { return userType; }
            const T& operator()() const { return userType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct GmtCreate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gmt_create";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gmtCreate;
            T& operator()() { return gmtCreate; }
            const T& operator()() const { return gmtCreate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
    struct GmtModified
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gmt_modified";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gmtModified;
            T& operator()() { return gmtModified; }
            const T& operator()() const { return gmtModified; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
  } // namespace DeUser_

  struct DeUser: sqlpp::table_t<DeUser,
               DeUser_::TntInstId,
               DeUser_::UserId,
               DeUser_::UserName,
               DeUser_::UserType,
               DeUser_::GmtCreate,
               DeUser_::GmtModified>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "de_user";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T deUser;
        T& operator()() { return deUser; }
        const T& operator()() const { return deUser; }
      };
    };
  };
} // namespace model
#endif
