// generated by /Users/samray/code/cpp/sqlpp11/scripts/ddl2cpp ./conf/de_ident.sql src/dal/identification model
#ifndef MODEL_IDENTIFICATION_H
#define MODEL_IDENTIFICATION_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace model
{
  namespace DeIdent_
  {
    struct TntInstId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tnt_inst_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tntInstId;
            T& operator()() { return tntInstId; }
            const T& operator()() const { return tntInstId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct IdentId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ident_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T identId;
            T& operator()() { return identId; }
            const T& operator()() const { return identId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userId;
            T& operator()() { return userId; }
            const T& operator()() const { return userId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct IdentType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ident_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T identType;
            T& operator()() { return identType; }
            const T& operator()() const { return identType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct IdentKey
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ident_key";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T identKey;
            T& operator()() { return identKey; }
            const T& operator()() const { return identKey; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct IdentValue
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ident_value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T identValue;
            T& operator()() { return identValue; }
            const T& operator()() const { return identValue; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct GmtCreate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gmt_create";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gmtCreate;
            T& operator()() { return gmtCreate; }
            const T& operator()() const { return gmtCreate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
    struct GmtModified
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gmt_modified";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gmtModified;
            T& operator()() { return gmtModified; }
            const T& operator()() const { return gmtModified; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
  } // namespace DeIdent_

  struct DeIdent: sqlpp::table_t<DeIdent,
               DeIdent_::TntInstId,
               DeIdent_::IdentId,
               DeIdent_::UserId,
               DeIdent_::IdentType,
               DeIdent_::IdentKey,
               DeIdent_::IdentValue,
               DeIdent_::GmtCreate,
               DeIdent_::GmtModified>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "de_ident";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T deIdent;
        T& operator()() { return deIdent; }
        const T& operator()() const { return deIdent; }
      };
    };
  };
} // namespace model
#endif
