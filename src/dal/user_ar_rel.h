// generated by /Users/samray/code/cpp/sqlpp11/scripts/ddl2cpp ./conf/de_user_ar_rel.sql src/dal/user_ar_rel model
#ifndef MODEL_USER_AR_REL_H
#define MODEL_USER_AR_REL_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace model
{
  namespace DeUserArRel_
  {
    struct TntInstId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tnt_inst_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tntInstId;
            T& operator()() { return tntInstId; }
            const T& operator()() const { return tntInstId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct RelId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rel_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T relId;
            T& operator()() { return relId; }
            const T& operator()() const { return relId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userId;
            T& operator()() { return userId; }
            const T& operator()() const { return userId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct RelStatus
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rel_status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T relStatus;
            T& operator()() { return relStatus; }
            const T& operator()() const { return relStatus; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct PdCode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pd_code";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pdCode;
            T& operator()() { return pdCode; }
            const T& operator()() const { return pdCode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct PdName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pd_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pdName;
            T& operator()() { return pdName; }
            const T& operator()() const { return pdName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct PdOrgName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pd_org_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pdOrgName;
            T& operator()() { return pdOrgName; }
            const T& operator()() const { return pdOrgName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct ArName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ar_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T arName;
            T& operator()() { return arName; }
            const T& operator()() const { return arName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct ArNo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ar_no";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T arNo;
            T& operator()() { return arNo; }
            const T& operator()() const { return arNo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct PropertyValues
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "property_values";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T propertyValues;
            T& operator()() { return propertyValues; }
            const T& operator()() const { return propertyValues; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Memo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "memo";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T memo;
            T& operator()() { return memo; }
            const T& operator()() const { return memo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct GmtCreate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gmt_create";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gmtCreate;
            T& operator()() { return gmtCreate; }
            const T& operator()() const { return gmtCreate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
    struct GmtModified
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gmt_modified";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gmtModified;
            T& operator()() { return gmtModified; }
            const T& operator()() const { return gmtModified; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
  } // namespace DeUserArRel_

  struct DeUserArRel: sqlpp::table_t<DeUserArRel,
               DeUserArRel_::TntInstId,
               DeUserArRel_::RelId,
               DeUserArRel_::UserId,
               DeUserArRel_::RelStatus,
               DeUserArRel_::PdCode,
               DeUserArRel_::PdName,
               DeUserArRel_::PdOrgName,
               DeUserArRel_::ArName,
               DeUserArRel_::ArNo,
               DeUserArRel_::PropertyValues,
               DeUserArRel_::Memo,
               DeUserArRel_::GmtCreate,
               DeUserArRel_::GmtModified>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "de_user_ar_rel";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T deUserArRel;
        T& operator()() { return deUserArRel; }
        const T& operator()() const { return deUserArRel; }
      };
    };
  };
} // namespace model
#endif
